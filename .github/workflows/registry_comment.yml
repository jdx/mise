name: registry_comment
on:
  pull_request_target:
    branches: [main]
    types:
      - opened
      - edited
      - reopened
      - synchronize
    paths:
      - registry.toml
      - .github/workflows/registry.yml
      - src/cli/test_tool.rs

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.pull_request.number || 'push' }}
  cancel-in-progress: true

jobs:
  validate-registry-pr:
    name: Validate registry PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      new-tools-added: ${{ steps.check-new-tools.outputs.new-tools-added }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Check if only registry.toml is modified
        id: check-files
        run: |
          # Check if we can access the commits
          if ! git rev-parse ${{ github.event.pull_request.base.sha }} >/dev/null 2>&1; then
            echo "❌ Error: Cannot access base commit"
            echo "only-registry-toml=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if ! git rev-parse ${{ github.event.pull_request.head.sha }} >/dev/null 2>&1; then
            echo "❌ Error: Cannot access head commit"
            echo "only-registry-toml=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get the list of modified files
          MODIFIED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Check if only registry.toml is modified
          if [[ "$MODIFIED_FILES" == "registry.toml" ]]; then
            echo "only-registry-toml=true" >> $GITHUB_OUTPUT
            echo "Only registry.toml is modified"
          else
            echo "only-registry-toml=false" >> $GITHUB_OUTPUT
            echo "Other files are also modified:"
            echo "$MODIFIED_FILES"
          fi
      - name: Check for new tools added
        id: check-new-tools
        run: |
          # Extract tool names from base commit (lines ending with .backends)
          BASE_TOOLS=$(git show ${{ github.event.pull_request.base.sha }}:registry.toml | grep -E '^[a-zA-Z0-9_-]+\.backends' | sed 's/\.backends.*//' | sort)
          
          # Extract tool names from head commit (lines ending with .backends)
          HEAD_TOOLS=$(git show ${{ github.event.pull_request.head.sha }}:registry.toml | grep -E '^[a-zA-Z0-9_-]+\.backends' | sed 's/\.backends.*//' | sort)
          
          # Find new tools (tools in head but not in base)
          NEW_TOOLS=$(comm -13 <(echo "$BASE_TOOLS") <(echo "$HEAD_TOOLS"))
          
          if [[ -n "$NEW_TOOLS" ]]; then
            echo "new-tools-added=true" >> $GITHUB_OUTPUT
            echo "new-tools=$NEW_TOOLS" >> $GITHUB_OUTPUT
            echo "New tools detected:"
            echo "$NEW_TOOLS"
          else
            echo "new-tools-added=false" >> $GITHUB_OUTPUT
            echo "No new tools detected"
          fi
      - name: Check PR title format
        if: steps.check-files.outputs.only-registry-toml == 'true' && steps.check-new-tools.outputs.new-tools-added == 'false'
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          if [[ ! "$PR_TITLE" =~ ^registry: ]]; then
            echo "❌ Error: PR title must start with 'registry:' when only registry.toml is modified"
            echo "Current title: $PR_TITLE"
            echo "Expected format: registry: [description]"
            exit 1
          fi
          echo "✅ PR title format is valid"
      - name: Validate new tool PR title format
        if: steps.check-new-tools.outputs.new-tools-added == 'true'
        env:
          NEW_TOOLS: ${{ steps.check-new-tools.outputs.new-tools }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Check if PR title follows the exact format: registry: add [TOOL] ([FULL])
          if [[ ! "$PR_TITLE" =~ ^registry:\ add\ [a-zA-Z0-9_-]+\ \([a-zA-Z0-9@:/-]+\)$ ]]; then
            echo "❌ Error: PR title must follow the exact format when adding new tools"
            echo "Current title: $PR_TITLE"
            echo "Expected format: registry: add [TOOL] ([FULL])"
            echo "Example: registry: add rg (aqua:BurntSushi/ripgrep)"
            exit 1
          fi
          
          # Check if PR title mentions any of the new tools
          TOOL_MENTIONED=false
          for tool in $NEW_TOOLS; do
            if [[ "$PR_TITLE" == *"$tool"* ]]; then
              TOOL_MENTIONED=true
              break
            fi
          done
          
          if [[ "$TOOL_MENTIONED" == "false" ]]; then
            echo "❌ Error: PR title should mention the new tool(s) being added"
            echo "New tools: $NEW_TOOLS"
            echo "Current title: $PR_TITLE"
            echo "Expected format: registry: add [TOOL] ([FULL])"
            echo "Example: registry: add rg (aqua:BurntSushi/ripgrep)"
            exit 1
          fi
          echo "✅ PR title format is valid and mentions new tool(s)"

  build:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    needs: validate-registry-pr
    steps:
      - uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # v3
        if: github.event.pull_request.number != null && github.actor != 'jdx' && needs.validate-registry-pr.outputs.new-tools-added == 'true'
        with:
          comment-tag: "mise-registry-bot"
          message: |
            If you are adding a new tool to mise, note the following:

            - New asdf plugins are not accepted
            - Tools may be rejected if they are not notable
            - A test is required in `registry.toml`
            - PR title should follow: `registry: add [TOOL] ([FULL])`, e.g. `registry: add rg (aqua:BurntSushi/ripgrep)`
