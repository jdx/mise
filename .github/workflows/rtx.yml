name: rtx

on:
  push:
    tags: ["v*"]
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  unit:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      - name: Install direnv/shfmt
        run: sudo apt-get update; sudo apt-get install direnv shfmt
      - uses: taiki-e/install-action@just
      - uses: taiki-e/install-action@nextest
      - run: just build-core-plugins
      - name: Run cargo nextest
        run: cargo nextest run --features clap_mangen
        env:
          RUST_BACKTRACE: "1"
      - run: just lint

  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: rustup toolchain install nightly --component llvm-tools-preview
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      - uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install zsh/fish/direnv
        run: sudo apt-get update; sudo apt-get install zsh fish direnv
      - name: Install just
        uses: taiki-e/install-action@just
      - run: just build-core-plugins
      - name: Run tests with coverage
        uses: nick-fields/retry@v2
        env:
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RTX_GITHUB_BOT_TOKEN: ${{ secrets.RTX_GITHUB_BOT_TOKEN }}
          RUST_BACKTRACE: "1"
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: just test-coverage
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          files: lcov.info

  build-linux:
    name: build-${{matrix.target}}
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-linux-${{matrix.target}}"
          save-if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      - uses: taiki-e/install-action@cross
      - uses: taiki-e/install-action@just
      - run: just build-core-plugins
      - run: scripts/build-linux.sh ${{matrix.target}}
      - uses: actions/upload-artifact@v3
        with:
          name: tarball-${{matrix.target}}
          path: |
            dist/rtx-*.tar.xz
            dist/rtx-*.tar.gz
          if-no-files-found: error

  build-macos:
    name: build-${{matrix.target}}
    runs-on: macos-12
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v3
      - run: rustup target add ${{matrix.target}}
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{matrix.target}}"
          save-if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      - uses: taiki-e/install-action@just
      - run: just build-core-plugins
      - run: scripts/build-macos.sh ${{matrix.target}}
      - uses: actions/upload-artifact@v3
        with:
          name: tarball-${{matrix.target}}
          path: |
            dist/rtx-*.tar.xz
            dist/rtx-*.tar.gz
          if-no-files-found: error
  e2e-linux:
    runs-on: ubuntu-22.04
    needs: [build-linux]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Install zsh/fish/direnv
        run: sudo apt-get update; sudo apt-get install zsh fish direnv
      - uses: actions/download-artifact@v3
        with:
          name: tarball-x86_64-unknown-linux-gnu
          path: dist
      - run: tar -C "$HOME" -xvJf dist/rtx-$(./scripts/get-version.sh)-linux-x64.tar.xz
      - run: echo "$HOME/rtx/bin" >> $GITHUB_PATH
      - run: rtx -v
      - name: Run e2e tests
        uses: nick-fields/retry@v2
        env:
          RUST_BACKTRACE: "1"
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: ./e2e/run_all_tests
  rpm:
    runs-on: ubuntu-22.04
    needs: [build-linux]
    timeout-minutes: 10
    container: jdxcode/rtx:rpm
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
      - uses: actions/download-artifact@v3
        with:
          name: tarball-x86_64-unknown-linux-gnu
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: tarball-aarch64-unknown-linux-gnu
          path: dist
      - run: scripts/build-rpm.sh
      - uses: actions/upload-artifact@v3
        with:
          name: rpm
          path: dist/rpmrepo
          if-no-files-found: error
  deb:
    runs-on: ubuntu-22.04
    container: jdxcode/rtx:deb
    timeout-minutes: 10
    if: github.event_name != 'pull_request'
    needs: [build-linux]
    steps:
      - uses: actions/checkout@v3
      - uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
      - uses: actions/download-artifact@v3
        with:
          name: tarball-x86_64-unknown-linux-gnu
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: tarball-aarch64-unknown-linux-gnu
          path: dist
      - run: scripts/build-deb.sh
      - uses: actions/upload-artifact@v3
        with:
          name: deb
          path: dist/deb
          if-no-files-found: error
  release:
    runs-on: ubuntu-22.04
    if: startsWith(github.event.ref, 'refs/tags/v')
    timeout-minutes: 10
    permissions:
      contents: write
    needs:
      - unit
      - coverage
      - e2e-linux
      - build-linux
      - build-macos
      - rpm
      - deb
    steps:
      - uses: actions/checkout@v3
        with:
          path: rtx
      - uses: actions/checkout@v3
        with:
          repository: jdxcode/homebrew-tap
          path: homebrew-tap
          token: ${{ secrets.RTX_GITHUB_BOT_TOKEN }}
      - name: Install fd-find
        run: |
          sudo apt-get update
          sudo apt-get install fd-find
          mkdir -p "$HOME/.local/bin"
          ln -s $(which fdfind) "$HOME/.local/bin/fd"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"
      - name: Wrangler
        run: npm i -g wrangler@^2.12.2
      - uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.RTX_SSH_KEY }}
          known_hosts: ${{ secrets.RTX_KNOWN_HOSTS_AUR }}
      - uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          workdir: homebrew-tap
      - uses: actions/download-artifact@v3
        with: { path: artifacts }
      - run: rtx/scripts/release.sh
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: homebrew-tap push
        run: git push
        working-directory: homebrew-tap
      - name: GitHub Release Assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.event.ref, 'refs/tags/v')
        with:
          fail_on_unmatched_files: true
          draft: false
          files: releases/${{github.ref_name}}/*
          generate_release_notes: true
          token: ${{ secrets.RTX_GITHUB_BOT_TOKEN }}
      - name: Release to aur
        run: scripts/release-aur.sh
        working-directory: rtx
  bump-homebrew-formula:
    runs-on: macos-latest
    if: startsWith(github.event.ref, 'refs/tags/v')
    timeout-minutes: 10
    needs: [release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Bump Homebrew formula
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.RTX_GITHUB_BOT_TOKEN }}
          formula: rtx
