#!/usr/bin/env bash
# shellcheck disable=SC2103

# Test mise generate tool-stub command functionality

# Disable GPG verification to avoid test failures
export MISE_GPG_VERIFY=false

# Create test project directory
mkdir -p generate_tool_stub_test
cd generate_tool_stub_test

# Test 1: Basic tool stub generation with URL (skip download for speed)
assert_succeed "mise generate tool-stub test-tool-basic --url 'https://httpbin.org/status/200' --skip-download"

# Verify the generated stub exists and is executable
assert_succeed "test -x test-tool-basic"

# Verify the generated stub contains expected content
assert_contains "cat test-tool-basic" "#!/usr/bin/env -S mise tool-stub"
assert_contains "cat test-tool-basic" "# test-tool-basic tool stub"
assert_contains "cat test-tool-basic" 'version = "latest"'
assert_contains "cat test-tool-basic" 'url = "https://httpbin.org/status/200"'

# Test 2: Tool stub generation with specific version
assert_succeed "mise generate tool-stub versioned-tool --version '1.2.3' --url 'https://httpbin.org/status/200' --skip-download"

assert_contains "cat versioned-tool" 'version = "1.2.3"'

# Test 3: Tool stub generation with platform-specific URLs
assert_succeed "mise generate tool-stub platform-tool --platform-url 'linux-x64:https://httpbin.org/status/200' --platform-url 'darwin-arm64:https://httpbin.org/status/201' --skip-download"

assert_contains "cat platform-tool" "[platforms.linux-x64]"
assert_contains "cat platform-tool" 'url = "https://httpbin.org/status/200"'
assert_contains "cat platform-tool" "[platforms.darwin-arm64]"
assert_contains "cat platform-tool" 'url = "https://httpbin.org/status/201"'

# Test 4: Tool stub generation with custom binary path
assert_succeed "mise generate tool-stub custom-bin-tool --url 'https://httpbin.org/status/200' --bin 'bin/custom-binary' --skip-download"

assert_contains "cat custom-bin-tool" 'bin = "bin/custom-binary"'

# Test 5: Error handling - missing URL and platform
assert_fail "mise generate tool-stub missing-url --skip-download"

# Test 6: Error handling - invalid platform format
assert_fail "mise generate tool-stub invalid-platform --platform-url 'invalid-format' --skip-download"

# Test 7: Valid platform names should work (no restriction)
assert_succeed "mise generate tool-stub custom-platform-tool --platform-url 'my-platform:https://httpbin.org/status/200' --skip-download"

# Test 8: Verify generated stub content is well-formed TOML
echo '#!/usr/bin/env -S mise tool-stub
# simple test stub
version = "1.0.0"
url = "https://httpbin.org/status/200"' >simple-stub
chmod +x simple-stub

# Verify the stub file contains valid TOML content
assert_contains "cat simple-stub" 'version = "1.0.0"'
assert_contains "cat simple-stub" 'url = "https://httpbin.org/status/200"'

# Test 9: Help command
assert_succeed "mise generate tool-stub --help"
assert_contains "mise generate tool-stub --help" "Generate a tool stub for HTTP-based tools"

# Test 10: Verify the command is available in mise generate
assert_contains "mise generate --help" "tool-stub"

echo "All tool-stub generation tests passed!"

#!/usr/bin/env bash
# shellcheck disable=SC2103

# Test mise generate tool-stub command with real downloads (slow test)

# Disable GPG verification to avoid test failures
export MISE_GPG_VERIFY=false

# Create test project directory
mkdir -p generate_tool_stub_slow_test
cd generate_tool_stub_slow_test

# Test 1: Generate tool stub with checksum and size detection
# Using a small, reliable file for testing
assert_succeed "mise generate tool-stub hello-stub --url 'https://httpbin.org/json'"

# Verify the generated stub exists and is executable
assert_succeed "test -x hello-stub"

# Verify the generated stub contains checksum and size
assert_contains "cat hello-stub" "checksum ="
assert_contains "cat hello-stub" "size ="

# Test 2: Test with a real GitHub release (small file)
assert_succeed "mise generate tool-stub gh-test-stub --url 'https://github.com/cli/cli/releases/download/v2.21.2/gh_2.21.2_checksums.txt'"

# Verify it has checksum and size
assert_contains "cat gh-test-stub" "checksum ="
assert_contains "cat gh-test-stub" "size ="

# Test 3: Test binary path detection with a simple archive
# This would require a real tar.gz file, so we'll skip this for now
# as it's complex to set up in e2e tests

# Test 4: Verify that generated stubs have valid TOML structure
assert_contains "cat hello-stub" "checksum ="
assert_contains "cat hello-stub" "size ="
assert_contains "cat gh-test-stub" "checksum ="
assert_contains "cat gh-test-stub" "size ="

echo "All slow tool-stub generation tests passed!"
