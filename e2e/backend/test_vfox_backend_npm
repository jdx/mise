#!/usr/bin/env bash
# shellcheck disable=SC2103

# Test vfox backend with npm plugin (plugin:tool format)

# Create a temporary vfox plugin directory with backend support
temp_plugins_dir=$(mktemp -d)
plugin_name="test-npm"
plugin_dir="$temp_plugins_dir/$plugin_name"

# Ensure cleanup happens
cleanup() {
  rm -rf "$temp_plugins_dir"
  # Clean up any test installations
  rm -rf "$MISE_DATA_DIR/installs/vfox-test-npm" 2>/dev/null || true
  # Clean up plugin link
  mise plugins unlink vfox-test-npm 2>/dev/null || true
}
trap cleanup EXIT

# Create the plugin directory
mkdir -p "$plugin_dir/hooks"

# Create metadata.lua with backend support that actually uses npm
cat >"$plugin_dir/metadata.lua" <<'EOF'
PLUGIN = {
    name = "vfox-test-npm",
    version = "1.0.0", 
    description = "Test npm backend plugin that uses real npm",
    author = "Test",
    license = "MIT",
    
    -- Backend methods for plugin:tool format (CamelCase)
    BackendListVersions = function(ctx)
        local tool = BACKEND_CTX.tool
        local versions = {}
        
        -- Use npm view to get real versions
        local cmd = require("cmd")
        local result = cmd.exec("npm view " .. tool .. " versions --json 2>/dev/null")
        
        if result and result ~= "" and not result:match("npm ERR!") then
            -- Parse JSON response from npm using built-in json module
            local json = require("json")
            local success, npm_versions = pcall(json.decode, result)
            
            if success and npm_versions then
                if type(npm_versions) == "table" then
                    for i = #npm_versions, 1, -1 do
                        local version = npm_versions[i]
                        table.insert(versions, version)
                    end
                end
            end
        end
        
        if #versions == 0 then
            error("Failed to fetch versions for " .. tool .. " from npm registry")
        end
        
        return {versions = versions}
    end,
    
    BackendInstall = function(ctx)
        local tool = BACKEND_CTX.tool
        local version = BACKEND_CTX.version
        local install_path = BACKEND_CTX.install_path
        
        -- Create install directory
        os.execute("mkdir -p " .. install_path)
        
        -- Install the package directly using npm install
        local cmd = require("cmd")
        local npm_cmd = "cd " .. install_path .. " && npm install " .. tool .. "@" .. version .. " --no-package-lock --no-save --silent 2>/dev/null"
        local result = cmd.exec(npm_cmd)
        
        -- If we get here, the command succeeded
        return {}
    end,
    
    BackendExecEnv = function(ctx)
        local install_path = BACKEND_CTX.install_path
        if install_path then
            -- Add node_modules/.bin to PATH for npm-installed binaries
            local bin_path = install_path .. "/node_modules/.bin"
            return {
                env_vars = {
                    {key = "PATH", value = bin_path}
                }
            }
        else
            return {env_vars = {}}
        end
    end
}
EOF

# Initialize the plugin directory as a git repository
cd "$plugin_dir"
git init --quiet
git add .
git commit --quiet -m "Initial commit"
cd -

# Link the plugin
mise plugins link vfox-test-npm "$plugin_dir"

# Test plugin:tool format with assertions
latest_version=$(mise latest vfox-test-npm:prettier)
partial_version=$(echo "$latest_version" | cut -d. -f1-2)
assert_contains "mise ls-remote vfox-test-npm:prettier" "$partial_version."
mise install "vfox-test-npm:prettier@$latest_version"
assert "mise use vfox-test-npm:prettier@$latest_version"
assert_contains "mise exec -- prettier --version" "$latest_version"

# Test uninstall functionality
assert "mise uninstall vfox-test-npm:prettier@$latest_version"
assert_directory_not_exists "$MISE_DATA_DIR/installs/vfox-test-npm/prettier/$latest_version"
