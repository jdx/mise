#!/usr/bin/env bash

# Test that npm backend shows helpful error when npm is not installed

# Create a PATH that has mise but not npm/node
# Keep only mise and essential system paths
MISE_DIR="${CARGO_TARGET_DIR:-$ROOT/target}/debug"
export PATH="$MISE_DIR:/usr/bin:/bin:/usr/sbin:/sbin"

# Ensure npm is not available
if command -v npm >/dev/null 2>&1; then
	echo "ERROR: npm should not be available in test environment"
	exit 1
fi

# Ensure mise is available
if ! command -v mise >/dev/null 2>&1; then
	echo "ERROR: mise should be available in test environment"
	exit 1
fi

# Test listing versions - should show helpful error
echo "Testing ls-remote with missing npm..."
output=$(mise ls-remote npm:test-package 2>&1 || true)
if ! echo "$output" | grep -q "npm is required but not found"; then
	echo "ERROR: Expected error message about missing npm"
	echo "Got: $output"
	exit 1
fi
if ! echo "$output" | grep -q "mise use node@latest"; then
	echo "ERROR: Error message should suggest installing node"
	echo "Got: $output"
	exit 1
fi
if ! echo "$output" | grep -q "mise settings npm.bun=true"; then
	echo "ERROR: Error message should mention bun alternative"
	echo "Got: $output"
	exit 1
fi

# Test installing - should show helpful error
echo "Testing install with missing npm..."
output=$(mise install npm:test-package@latest 2>&1 || true)
if ! echo "$output" | grep -q "npm is required but not found"; then
	echo "ERROR: Expected error message about missing npm"
	echo "Got: $output"
	exit 1
fi

# Now test with bun mode enabled but bun not installed
echo "Testing with bun mode enabled but bun missing..."
export MISE_NPM_BUN=true
output=$(mise ls-remote npm:test-package 2>&1 || true)
if ! echo "$output" | grep -q "bun is required but not found"; then
	echo "ERROR: Expected error message about missing bun"
	echo "Got: $output"
	exit 1
fi
if ! echo "$output" | grep -q "mise use bun@latest"; then
	echo "ERROR: Error message should suggest installing bun"
	echo "Got: $output"
	exit 1
fi

echo "âœ“ npm missing error test passed"
