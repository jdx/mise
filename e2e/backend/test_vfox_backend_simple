#!/usr/bin/env bash

# Test vfox backend with a simple test plugin
echo "Testing vfox backend with simple test plugin..."

# Create a temporary vfox plugin directory with backend support
temp_plugins_dir=$(mktemp -d)
plugin_name="simple-test"
plugin_dir="$temp_plugins_dir/$plugin_name"

# Ensure cleanup happens
cleanup() {
    rm -rf "$temp_plugins_dir"
    # Clean up any test installations
    rm -rf "$MISE_DATA_DIR/installs/vfox-simple-test" 2>/dev/null || true
    # Clean up plugin link
    mise plugins unlink vfox-simple-test 2>/dev/null || true
}
trap cleanup EXIT

# Create the plugin directory
mkdir -p "$plugin_dir"

# Create metadata.lua with simple backend support
cat > "$plugin_dir/metadata.lua" << 'EOF'
PLUGIN = {
    name = "vfox-simple-test",
    version = "1.0.0", 
    description = "Simple backend test plugin",
    author = "Test",
    license = "MIT",
    backendEnabled = true,
    backendName = "vfox-simple-test",
    
    backend_list_versions = function(ctx)
        print("Backend list_versions called")
        return {
            versions = {"1.0.0", "1.1.0", "2.0.0"}
        }
    end,
    
    backend_install = function(ctx)
        print("Backend install called for version: " .. ctx.version)
        local install_path = ctx.install_path
        local bin_dir = install_path .. "/bin"
        
        -- Create directories
        os.execute("mkdir -p " .. bin_dir)
        
        -- Create a simple test executable
        local test_exe = bin_dir .. "/simple-test"
        local file = io.open(test_exe, "w")
        file:write("#!/bin/sh\necho 'simple-test version " .. ctx.version .. "'\n")
        file:close()
        
        -- Make it executable
        os.execute("chmod +x " .. test_exe)
        
        print("Created test executable at: " .. test_exe)
        
        return {
            success = true,
            message = "Successfully installed simple-test@" .. ctx.version
        }
    end,
    
    backend_exec_env = function(ctx)
        print("Backend exec_env called")
        local install_path = ctx.install_path
        local bin_path = install_path .. "/bin"
        
        return {
            env_vars = {
                {key = "SIMPLE_TEST_ROOT", value = install_path},
                {key = "PATH", value = bin_path}
            }
        }
    end,
    
    backend_uninstall = function(ctx)
        print("Backend uninstall called")
        return {
            success = true,
            message = "Successfully uninstalled simple-test"
        }
    end
}
EOF

# Initialize the plugin directory as a git repository
cd "$plugin_dir"
git init
git add .
git commit -m "Initial commit"
cd -

# Link the plugin
echo "Linking simple test plugin..."
mise plugins link vfox-simple-test "$plugin_dir"

# Verify the plugin was linked
echo "=== Checking plugin link ==="
if ls -la ~/.mise/plugins/ | grep vfox-simple-test; then
    echo "✓ Plugin linked successfully"
else
    echo "✗ Plugin link failed"
    exit 1
fi

# Test basic plugin recognition
echo "=== Testing plugin recognition ==="
if mise plugins ls | grep vfox-simple-test; then
    echo "✓ Plugin recognized by mise"
else
    echo "✗ Plugin not recognized by mise"
    # Continue anyway to see what errors we get
fi

# Test backend functionality
echo "=== Testing backend_list_versions ==="
echo "Running: mise ls-remote vfox-simple-test"
if mise ls-remote vfox-simple-test | head -3; then
    echo "✓ Backend version listing works"
else
    echo "✗ Backend version listing failed"
    echo "Continuing to next test..."
fi

# Test installation
echo "=== Testing backend_install ==="
echo "Running: mise install vfox-simple-test@1.0.0"
if mise install vfox-simple-test@1.0.0; then
    echo "✓ Backend installation works"
else
    echo "✗ Backend installation failed"
    echo "Continuing to next test..."
fi

# Test execution
echo "=== Testing execution ==="
echo "Running: mise exec vfox-simple-test@1.0.0 -- simple-test"
if mise exec vfox-simple-test@1.0.0 -- simple-test; then
    echo "✓ Tool execution works"
else
    echo "✗ Tool execution failed"
fi

echo "=== Test complete ===" 
