#!/usr/bin/env bash

set -euo pipefail

# Test comprehensive error display with multiline snapshot-style checks
# This test validates that error messages are properly formatted and structured

# Disable colors for consistent output
export NO_COLOR=1

echo "Testing error message formatting..."

# Test 1: Invalid tool version error - check full error structure
echo "Test 1: Invalid tool version - multiline error check"
output=$(mise install core:node@invalid-version 2>&1 || true)

# Check that the error message has the expected structure
if ! echo "$output" | grep -q "Failed to install core:node@invalid-version:"; then
	echo "ERROR: Output structure doesn't match expected format"
	echo "=== Actual output ==="
	echo "$output" | head -20
	exit 1
fi

# Should have HTTP error in the output
if ! echo "$output" | grep -q "HTTP status client error"; then
	echo "ERROR: Missing HTTP error"
	echo "=== Actual output ==="
	echo "$output" | head -20
	exit 1
fi

echo "✓ Error structure matches expected format"

# Test 2: Backend-specific error with proper formatting
echo "Test 2: Backend error - multiline check"
output=$(mise install cargo:nonexistent-crate-12345@1.0.0 2>&1 || true)

# Should show the full tool identifier and error details
if ! echo "$output" | grep -q "Failed to install cargo:nonexistent-crate-12345@1.0.0:"; then
	echo "ERROR: Missing proper tool identifier in cargo error"
	echo "=== Actual output ==="
	echo "$output" | head -15
	exit 1
fi

# Check that we have the error chain structure
if ! echo "$output" | grep -q "   0:"; then
	echo "ERROR: Missing error chain in output"
	echo "=== Actual output ==="
	echo "$output" | head -15
	exit 1
fi

echo "✓ Backend error structure correct"

# Test 3: Multiple tool failures should have proper structure
echo "Test 3: Multiple installation failures - multiline check"
output=$(mise install tiny@999.999.999 jq@999.999.999 2>&1 || true)

# When multiple tools fail, we should see a different format
# The exact format depends on whether they're processed in parallel
if echo "$output" | grep -q "Failed to install tools:"; then
	# Multiple failures format
	if ! echo "$output" | grep -q "tiny@999.999.999\|jq@999.999.999"; then
		echo "ERROR: Missing tool names in multiple failure output"
		echo "=== Actual output ==="
		echo "$output" | head -20
		exit 1
	fi
	echo "✓ Multiple failure format correct"
else
	# Single failure format (if processed sequentially)
	if ! echo "$output" | grep -qE "Failed to install (asdf:tiny|aqua:jqlang/jq)@999.999.999:"; then
		echo "ERROR: Missing proper error format"
		echo "=== Actual output ==="
		echo "$output" | head -20
		exit 1
	fi
	echo "✓ Single failure format correct"
fi

# Test 4: Error with RUST_BACKTRACE should show full trace
echo "Test 4: Error with backtrace - multiline structure"
output=$(RUST_BACKTRACE=1 mise install node@invalid-version 2>&1 || true)

# Should still have the main error structure
if ! echo "$output" | grep -q "Failed to install core:node@invalid-version:"; then
	echo "ERROR: Missing main error with backtrace enabled"
	echo "=== Actual output (first 30 lines) ==="
	echo "$output" | head -30
	exit 1
fi

# With RUST_BACKTRACE=1, we should see stack frames or location info
if echo "$output" | grep -qE "(BACKTRACE|Location:|at .+\.rs:[0-9]+)"; then
	echo "✓ Backtrace information present"
else
	echo "Note: Backtrace may be optimized out in release builds"
fi

# Test 5: Plugin not found error should have clear message
echo "Test 5: Plugin not found - multiline check"
output=$(mise install nonexistent-tool@1.0.0 2>&1 || true)

# Should have a clear "not found" message
if ! echo "$output" | grep -qi "not found\|unknown backend\|no backend found"; then
	echo "ERROR: Missing clear 'not found' message for missing plugin"
	echo "=== Actual output ==="
	echo "$output" | head -10
	exit 1
fi

echo "✓ Plugin not found error format correct"

# Test 6: Invalid config file error
echo "Test 6: Invalid configuration - multiline check"
cat >test_invalid_config.toml <<EOF
[tools]
node = "this is not valid"
invalid_key = true
EOF

output=$(MISE_CONFIG_FILE=test_invalid_config.toml mise install 2>&1 || true)
rm -f test_invalid_config.toml

# Should show configuration error
if ! echo "$output" | grep -qi "error\|invalid\|failed"; then
	echo "ERROR: Missing error indication for invalid config"
	echo "=== Actual output ==="
	echo "$output" | head -15
	exit 1
fi

echo "✓ Invalid config error format correct"

# Test 7: Network error formatting
echo "Test 7: Network/download error - multiline check"
cat >test_download_error.toml <<EOF
[tools]
"github:nonexistent-org/nonexistent-repo" = "latest"
EOF

output=$(MISE_CONFIG_FILE=test_download_error.toml mise install 2>&1 || true)
rm -f test_download_error.toml

# Should show network/download related error
if ! echo "$output" | grep -qi "github:nonexistent-org/nonexistent-repo\|404\|not found\|failed"; then
	echo "ERROR: Missing proper network error information"
	echo "=== Actual output ==="
	echo "$output" | head -15
	exit 1
fi

echo "✓ Network error format correct"

echo "All error display tests passed!"
