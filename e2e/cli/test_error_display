#!/usr/bin/env bash

set -euo pipefail

# Test comprehensive error display
# This test validates that error messages are properly formatted and structured

# Try to disable colors (though debug build may ignore this - that's a bug to fix)
export NO_COLOR=1

echo "Testing error message formatting..."

# =============================================================================
# PART 1: Testing with FRIENDLY errors (simplified output)
# =============================================================================
echo ""
echo "PART 1: Testing FRIENDLY error format (MISE_FRIENDLY_ERROR=1)"
echo "============================================================"
export MISE_FRIENDLY_ERROR=1

# Test 1: Invalid tool version error
echo "Test 1: Invalid tool version"
assert_fail "mise install core:node@invalid-version" \
	"mise ERROR Failed to install core:node@invalid-version:"

# Test 2: Backend error (cargo)
echo "Test 2: Cargo backend error"
assert_fail "mise install cargo:nonexistent-crate-12345@1.0.0" \
	"mise ERROR Failed to install cargo:nonexistent-crate-12345@1.0.0: 
   0: HTTP status client error (404 Not Found)"

# Test 3: GitHub repository not found
echo "Test 3: GitHub repository not found"
assert_fail "mise install github:nonexistent-org/nonexistent-repo@latest" \
	"mise ERROR Failed to install github:nonexistent-org/nonexistent-repo@latest: 
   0:"

# Test 4: Plugin not found
echo "Test 4: Plugin not found"
assert_fail "mise install nonexistent-tool@1.0.0" \
	"mise ERROR nonexistent-tool not found in mise tool registry"

# Test 5: Multiple tool failures (could be single or multiple depending on timing)
echo "Test 5: Multiple tool failures"
assert_fail "mise install tiny@999.999.999 jq@999.999.999" \
	"mise ERROR Failed to install"

# =============================================================================
# PART 2: Testing with DETAILED errors (full error chains)
# =============================================================================
echo ""
echo "PART 2: Testing DETAILED error format (MISE_FRIENDLY_ERROR=0)"
echo "============================================================"
export MISE_FRIENDLY_ERROR=0

# Test 1: Invalid tool version error - check for the numbered error format with more context
echo "Test 1: Invalid tool version"
assert_fail "mise install core:node@invalid-version" \
	"mise ERROR Failed to install core:node@invalid-version: 
   0: HTTP status client error (404 Not Found)"

# Test 2: Backend error (cargo) - check for numbered error format with more context
echo "Test 2: Cargo backend error"
assert_fail "mise install cargo:nonexistent-crate-12345@1.0.0" \
	"mise ERROR Failed to install cargo:nonexistent-crate-12345@1.0.0: 
   0: HTTP status client error (404 Not Found)"

# Test 3: GitHub repository not found - check for numbered error format with more context
echo "Test 3: GitHub repository not found"
assert_fail "mise install github:nonexistent-org/nonexistent-repo@latest" \
	"mise ERROR Failed to install github:nonexistent-org/nonexistent-repo@latest: 
   0:"

# Test 4: Multiple tool failures - check for numbered error format
echo "Test 4: Multiple tool failures"
assert_fail "mise install tiny@999.999.999 jq@999.999.999" \
	"mise ERROR Failed to install"

# Test 5: Error with backtrace enabled - check for proper backtrace format
echo "Test 5: Error with backtrace"
assert_fail "RUST_BACKTRACE=1 mise install core:node@invalid-version" \
	"mise ERROR Failed to install core:node@invalid-version: HTTP status client error (404 Not Found)"

# Test 6: Invalid configuration (treated as version strings)
echo "Test 6: Invalid configuration"
cat >test_invalid_config.toml <<EOF
[tools]
node = "this is not valid"
python = ["also", "not", "valid"]
EOF

assert_fail "MISE_CONFIG_FILE=test_invalid_config.toml mise install" \
	"mise ERROR Failed to install"
rm -f test_invalid_config.toml

echo ""
echo "All error display tests passed!"
