#!/usr/bin/env bash

set -euo pipefail

# Test comprehensive error display for both friendly and non-friendly error messages
# This test validates that error messages are properly formatted and contain expected content
# It checks multi-line output to ensure no double-wrapping or redundant messages

echo "Testing error message formatting..."

# Test 1: Invalid tool version error (friendly)
echo "Test 1: Invalid tool version - checking full error output"
set +e
output=$(mise install node@invalid-version 2>&1)
exit_code=$?
set -e

if [ $exit_code -eq 0 ]; then
	echo "ERROR: Expected non-zero exit code for invalid version"
	exit 1
fi

# Check the error output structure
# Should show "Failed to install core:node@invalid-version:" at the top level
# Should NOT have duplicate "failed to install" messages
if ! echo "$output" | grep -q "Failed to install core:node@invalid-version:"; then
	echo "ERROR: Missing expected top-level error message"
	echo "Output: $output"
	exit 1
fi

# Check that we don't have redundant "failed to install" wrapping
failed_count=$(echo "$output" | grep -ic "failed to install" || true)
if [ "$failed_count" -gt 1 ]; then
	echo "ERROR: Found redundant 'failed to install' messages (count: $failed_count)"
	echo "Output: $output"
	exit 1
fi

# Check for HTTP error details (the actual error)
if ! echo "$output" | grep -qi "404\|not found\|http"; then
	echo "ERROR: Missing HTTP error details"
	echo "Output: $output"
	exit 1
fi

# Test 2: Missing plugin error
echo "Test 2: Missing plugin - checking error structure"
set +e
output=$(mise install nonexistent-tool@1.0.0 2>&1)
exit_code=$?
set -e

if [ $exit_code -eq 0 ]; then
	echo "ERROR: Expected non-zero exit code for missing plugin"
	exit 1
fi

# Check for appropriate error message
if ! echo "$output" | grep -q "not found\|unknown backend\|no backend found"; then
	echo "ERROR: Missing expected error message for missing plugin"
	echo "Output: $output"
	exit 1
fi

# Test 3: Multiple installation failures should show clear error structure
echo "Test 3: Multiple installation failures"
set +e
output=$(mise install node@invalid-version python@invalid-version 2>&1)
exit_code=$?
set -e

if [ $exit_code -eq 0 ]; then
	echo "ERROR: Expected non-zero exit code for multiple invalid versions"
	exit 1
fi

# For multiple failures, should show "Failed to install tools:" followed by list
if echo "$output" | grep -q "python@invalid-version"; then
	# Multiple tools were attempted
	if ! echo "$output" | grep -q "Failed to install tools:"; then
		echo "ERROR: Missing 'Failed to install tools:' header for multiple failures"
		echo "Output: $output"
		exit 1
	fi
else
	# Only one tool was attempted (parallel execution may vary)
	if ! echo "$output" | grep -q "Failed to install core:node@invalid-version"; then
		echo "ERROR: Missing error message for single failure"
		echo "Output: $output"
		exit 1
	fi
fi

# Test 4: Backend-specific error with context
echo "Test 4: Backend error with proper context"
set +e
output=$(mise install cargo:nonexistent-crate-12345@1.0.0 2>&1)
exit_code=$?
set -e

if [ $exit_code -eq 0 ]; then
	echo "ERROR: Expected non-zero exit code for invalid cargo crate"
	exit 1
fi

# Check that error shows the full tool identifier
if ! echo "$output" | grep -qi "cargo:nonexistent-crate-12345"; then
	echo "ERROR: Missing full tool identifier in error message"
	echo "Output: $output"
	exit 1
fi

# Should not have duplicate "failed to install" messages
failed_count=$(echo "$output" | grep -ic "failed to install" || true)
if [ "$failed_count" -gt 1 ]; then
	echo "ERROR: Found redundant 'failed to install' messages in cargo error (count: $failed_count)"
	echo "Output: $output"
	exit 1
fi

# Test 5: Error with backtrace should maintain structure
echo "Test 5: Error with backtrace enabled"
set +e
output=$(RUST_BACKTRACE=1 mise install node@invalid-version 2>&1)
exit_code=$?
set -e

if [ $exit_code -eq 0 ]; then
	echo "ERROR: Expected non-zero exit code with backtrace"
	exit 1
fi

# Should still have the main error message
if ! echo "$output" | grep -q "Failed to install core:node@invalid-version"; then
	echo "ERROR: Missing main error message with backtrace enabled"
	echo "Output: $output"
	exit 1
fi

# Check that backtrace doesn't introduce duplicate error wrapping
failed_count=$(echo "$output" | grep -ic "failed to install" || true)
if [ "$failed_count" -gt 1 ]; then
	echo "ERROR: Found redundant 'failed to install' messages with backtrace (count: $failed_count)"
	echo "Output: $output"
	exit 1
fi

# Test 6: Network/download error formatting
echo "Test 6: Network/download error"
cat >test_download_error.toml <<EOF
[tools]
"github:nonexistent-org/nonexistent-repo" = "latest"
EOF

set +e
output=$(mise --file test_download_error.toml install 2>&1)
exit_code=$?
set -e
rm -f test_download_error.toml

if [ $exit_code -eq 0 ]; then
	echo "ERROR: Expected non-zero exit code for download error"
	exit 1
fi

# Check for network-related error patterns
if ! echo "$output" | grep -qi "failed\|error\|unable\|404\|not found"; then
	echo "ERROR: Missing expected error message for download failure"
	echo "Output: $output"
	exit 1
fi

# Test 7: Debug mode should show more detail but maintain structure
echo "Test 7: Debug mode error structure"
set +e
output=$(MISE_DEBUG=1 mise install node@invalid-version 2>&1 | head -100)
exit_code=$?
set -e

# In debug mode, we should see more detailed error information
# but the structure should still be clean without redundant wrapping
if echo "$output" | grep -q "Failed to install"; then
	failed_count=$(echo "$output" | grep -ic "failed to install" || true)
	if [ "$failed_count" -gt 1 ]; then
		echo "ERROR: Found redundant 'failed to install' messages in debug mode (count: $failed_count)"
		echo "First 100 lines of output:"
		echo "$output"
		exit 1
	fi
fi

echo "All error display tests passed!"
