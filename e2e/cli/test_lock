#!/usr/bin/env bash

export MISE_LOCKFILE=1
export MISE_EXPERIMENTAL=1

echo "=== Testing basic lock command with no tools ==="
# Test basic lock command with no tools configured
assert_contains "mise lock" "No tools found to process"

echo "=== Testing dry-run with configured tools ==="
# Create a basic toml file with tools
cat <<EOF >mise.toml
[tools]
tiny = "1.0.0"
dummy = "2.0.0"
EOF

# Test dry-run mode with tools configured
assert_contains "mise lock --dry-run" "Targeting 1 platform(s)"
assert_contains "mise lock --dry-run" "Dry run - showing what would be processed"
assert_contains "mise lock --dry-run" "tiny"
assert_contains "mise lock --dry-run" "dummy"

echo "=== Testing lockfile generation ==="
# Test actual lockfile generation (will create mise.lock)
assert_contains "mise lock" "Targeting 1 platform(s)"
assert_contains "mise lock" "Lockfile updated at"

# Verify the lockfile was created with new multi-version format
assert "test -f mise.lock" ""
assert_contains "cat mise.lock" "[[tools.tiny]]"
assert_contains "cat mise.lock" "[[tools.dummy]]"
assert_contains "cat mise.lock" "backend ="
assert_contains "cat mise.lock" "version ="

echo "=== Testing tool filtering ==="
# Test filtering by specific tool (dry-run to avoid modifying)
assert_contains "mise lock tiny --dry-run" "tiny"
assert_not_contains "mise lock tiny --dry-run" "dummy"

echo "=== Testing platform filtering ==="
# Test filtering by specific platform
assert_contains "mise lock --platforms linux-x64" "Targeting 1 platform(s): linux-x64"
assert_contains "mise lock --platforms macos-arm64" "Targeting 1 platform(s): macos-arm64"

# Test multiple platform filtering
assert_contains "mise lock --platforms linux-x64,macos-arm64" "Targeting 2 platform(s): linux-x64, macos-arm64"

echo "=== Testing force flag ==="
# Test force flag - should regenerate lockfile even when it doesn't exist
rm -f mise.lock
assert_contains "mise lock --force" "Lockfile updated at"

# Create an existing lockfile with outdated content (missing dummy tool)
cat <<EOF >mise.lock
[tools]
tiny = [{ backend = "asdf:tiny", version = "1.0.0", platforms = { "linux-x64" = { checksum = "sha256:old_checksum", size = 999, url = "https://example.com/old-url" } } }]
EOF

# Verify the old lockfile only contains tiny, not dummy
assert_contains "cat mise.lock" "tiny"
assert_not_contains "cat mise.lock" "dummy"
assert_not_contains "cat mise.lock" "[[tools.tiny]]"
assert_not_contains "cat mise.lock" "[[tools.dummy]]"

# Test that --force regenerates existing lockfile with proper content
assert_contains "mise lock --force" "Lockfile updated at"

# Verify the lockfile was actually regenerated with both tools from mise.toml
assert_contains "cat mise.lock" "[[tools.tiny]]"
assert_contains "cat mise.lock" "[[tools.dummy]]"
# Verify it's using the new format, not the old one
assert_not_contains "cat mise.lock" "old_checksum"

echo "=== Testing existing lockfile handling ==="
# Test that when lockfile exists, we extract platforms from it
cat <<EOF >mise.lock
[tools]
tiny = [{ backend = "asdf:tiny", version = "1.0.0", platforms = { "linux-x64" = { checksum = "sha256:abc123", size = 1024, url = "https://example.com/tiny-1.0.0-linux-x64.tar.gz" } } }]
dummy = [{ backend = "core:dummy", version = "2.0.0" }]
EOF

# When lockfile exists and no platform specified, should extract from lockfile
assert_contains "mise lock --dry-run" "Targeting 1 platform(s): linux-x64"

echo "=== Testing aqua cargo-binstall digest resolution ==="
# Ensure that when using aqua for cargo-binstall we resolve GitHub digest (sha256) not fallback blake3
cat <<EOF >mise.toml
[tools]
cargo-binstall = "1.15.3"
EOF

rm -f mise.lock
assert_contains "mise lock -f" "Lockfile updated at"

assert_contains "cat mise.lock" "[[tools.cargo-binstall]]"
assert_contains "cat mise.lock" 'backend = "aqua:cargo-bins/cargo-binstall"'
# Expect sha256 algorithm (from GitHub API), not blake3 fallback
assert_contains "cat mise.lock" 'checksum = "sha256:'
assert_not_contains "cat mise.lock" 'checksum = "blake3:'
rm -f mise.toml mise.lock

echo "=== Testing help and version info ==="
# Test that help works
assert_contains "mise lock --help" "Update lockfile checksums and URLs"

echo "=== Cleanup ==="
# Clean up test files
rm -f mise.lock mise.toml

echo "mise lock tests passed!"
