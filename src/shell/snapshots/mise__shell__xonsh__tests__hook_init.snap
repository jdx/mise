---
source: src/shell/xonsh.rs
expression: "xonsh.activate(exe, \" --status\".into())"
---
from os               import environ
from xonsh.built_ins  import XSH

def listen_prompt(): # Hook Events
  execx($(/some/dir/mise hook-env --status -s xonsh))

envx = XSH.env
envx[   'MISE_SHELL'] = 'xonsh'
environ['MISE_SHELL'] = envx.get_detyped('MISE_SHELL')
XSH.builtins.events.on_pre_prompt(listen_prompt)  # Activate hook: before showing the prompt

def _mise(args):
  from contextlib import nullcontext
  import subprocess

  misebin = $(which -s mise)
  cm = nullcontext()
  if $(@(misebin) settings get color).startswith('true'):
    cm = __xonsh__.env.swap(FORCE_COLOR=1, CLICOLOR_FORCE=1, CLICOLOR=1)
  with cm:
    # cmd = !(@(misebin) @(args))
    cmd = subprocess.run([misebin, *args], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  out = cmd.stdout.decode()
  err = cmd.stderr.decode()
  #err = '' if cmd.errors is None else cmd.errors
  if args and args[0] in ('deactivate', 'shell', 'sh') and not ('--help' in args or '-h' in args):
    out = execx(out)
  return out, err

XSH.aliases['mise'] = _mise

del _mise, envx, environ, XSH, listen_prompt
