---
source: src/shell/fish.rs
expression: "fish.activate(exe, \" --status\".into())"
---
fish_add_path -g /some/dir
set -gx RTX_SHELL fish
set -gx __RTX_ORIG_PATH $PATH

function rtx
  if test (count $argv) -eq 0
    command /some/dir/rtx
    return
  end

  set command $argv[1]
  set -e argv[1]

  if contains -- --help $argv
    command /some/dir/rtx "$command" $argv
    return $status
  end

  switch "$command"
  case deactivate s shell
    # if help is requested, don't eval
    if contains -- -h $argv
      command /some/dir/rtx "$command" $argv
    else if contains -- --help $argv
      command /some/dir/rtx "$command" $argv
    else
      source (command /some/dir/rtx "$command" $argv |psub)
    end
  case '*'
    command /some/dir/rtx "$command" $argv
  end
end

function __rtx_env_eval --on-event fish_prompt --description 'Update rtx environment when changing directories';
    /some/dir/rtx hook-env --status -s fish | source;

    if test "$rtx_fish_mode" != "disable_arrow";
        function __rtx_cd_hook --on-variable PWD --description 'Update rtx environment when changing directories';
            if test "$rtx_fish_mode" = "eval_after_arrow";
                set -g __rtx_env_again 0;
            else;
                /some/dir/rtx hook-env --status -s fish | source;
            end;
        end;
    end;
end;

function __rtx_env_eval_2 --on-event fish_preexec --description 'Update rtx environment when changing directories';
    if set -q __rtx_env_again;
        set -e __rtx_env_again;
        /some/dir/rtx hook-env --status -s fish | source;
        echo;
    end;

    functions --erase __rtx_cd_hook;
end;
function fish_command_not_found
    if /some/dir/rtx hook-not-found -s fish $argv[1]
        /some/dir/rtx hook-env --status -s fish | source
    else
        __fish_default_command_not_found_handler $argv
    end
end

