.ie \n(.g .ds Aq \(aq
.el .ds Aq '
.TH rtx 1  "rtx 1.28.5" 
.SH NAME
rtx \- Polyglot runtime manager (asdf rust clone)
.SH SYNOPSIS
\fBrtx\fR [\fB\-\-install\-missing\fR] [\fB\-j\fR|\fB\-\-jobs\fR] [\fB\-\-log\-level\fR] [\fB\-r\fR|\fB\-\-raw\fR] [\fB\-v\fR|\fB\-\-verbose\fR]... [\fB\-h\fR|\fB\-\-help\fR] [\fB\-V\fR|\fB\-\-version\fR] <\fIsubcommands\fR>
.SH DESCRIPTION
rtx is a tool for managing runtime versions. https://github.com/jdxcode/rtx
.PP
It\*(Aqs a replacement for tools like nvm, nodenv, rbenv, rvm, chruby, pyenv, etc.
that works for any language. It\*(Aqs also great for managing linters/tools like
jq and shellcheck.
.PP
It is inspired by asdf and uses asdf\*(Aqs plugin ecosystem under the hood:
https://asdf\-vm.com/
.SH OPTIONS
.TP
\fB\-\-install\-missing\fR
Automatically install missing tools
.TP
\fB\-j\fR, \fB\-\-jobs\fR
Number of plugins and runtimes to install in parallel
default: 4
.TP
\fB\-\-log\-level\fR=\fILEVEL\fR [default: info]
Set the log output verbosity
.TP
\fB\-r\fR, \fB\-\-raw\fR
Directly pipe stdin/stdout/stderr to user.
Sets \-\-jobs=1
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Show installation output
.TP
\fB\-h\fR, \fB\-\-help\fR
Print help (see a summary with \*(Aq\-h\*(Aq)
.TP
\fB\-V\fR, \fB\-\-version\fR
Print version
.SH SUBCOMMANDS
.TP
rtx\-activate(1)
Initializes rtx in the current shell
.TP
rtx\-alias(1)
Manage aliases
.TP
rtx\-bin\-paths(1)
List all the active runtime bin paths
.TP
rtx\-cache(1)
Manage the rtx cache
.TP
rtx\-completion(1)
Generate shell completions
.TP
rtx\-current(1)
Shows current active and installed runtime versions
.TP
rtx\-deactivate(1)
Disable rtx for current shell session
.TP
rtx\-direnv(1)
Output direnv function to use rtx inside direnv
.TP
rtx\-doctor(1)
Check rtx installation for possible problems.
.TP
rtx\-env(1)
Exports env vars to activate rtx a single time
.TP
rtx\-exec(1)
Execute a command with runtime(s) set
.TP
rtx\-global(1)
Sets/gets the global runtime version(s)
.TP
rtx\-implode(1)
Removes rtx CLI and all related data
.TP
rtx\-install(1)
Install a tool version
.TP
rtx\-latest(1)
Gets the latest available version for a plugin
.TP
rtx\-local(1)
Sets/gets tool version in local .tool\-versions or .rtx.toml
.TP
rtx\-ls(1)
List installed and/or currently selected tool versions
.TP
rtx\-ls\-remote(1)
List runtime versions available for install
.TP
rtx\-plugins(1)
Manage plugins
.TP
rtx\-prune(1)
Delete unused versions of tools
.TP
rtx\-reshim(1)
[experimental] rebuilds the shim farm
.TP
rtx\-self\-update(1)
Updates rtx itself
.TP
rtx\-settings(1)
Manage settings
.TP
rtx\-shell(1)
Sets a tool version for the current shell session
.TP
rtx\-trust(1)
Marks a config file as trusted
.TP
rtx\-uninstall(1)
Removes runtime versions
.TP
rtx\-version(1)
Show rtx version
.TP
rtx\-where(1)
Display the installation path for a runtime
.TP
rtx\-which(1)
Shows the path that a bin name points to
.TP
rtx\-help(1)
Print this message or the help of the given subcommand(s)
.SH EXTRA
Examples:
  $ rtx install nodejs@20.0.0       Install a specific node version
  $ rtx install nodejs@20.0         Install a version matching a prefix
  $ rtx install nodejs              Install the node version defined in
                                  .tool\-versions or .rtx.toml
  $ rtx local nodejs@20             Use node\-20.x in current project
  $ rtx global nodejs@20            Use node\-20.x as default
  $ rtx local nodejs@latest         Use latest node in current directory
  $ rtx global nodejs@system        Use system node everywhere unless overridden
  $ rtx x nodejs@20 \-\- node app.js  Run `node app.js` with PATH pointing to
                                  node\-20.x
.SH VERSION
v1.28.5
.SH AUTHORS
Jeff Dickey <@jdxcode>
