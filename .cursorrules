# Cursor Rules for mise

## Project Context
mise is a development environment setup tool written in Rust that manages:
- Dev Tools: Version management for programming languages and tools
- Environments: Environment variable management
- Tasks: Task runner for project automation

## Conventional Commits (REQUIRED)
All commit messages and PR titles MUST follow conventional commit format:

### Commit Types
- `feat:` - New features
- `fix:` - Bug fixes  
- `refactor:` - Code refactoring
- `doc:` - Documentation changes
- `style:` - Code style/formatting
- `perf:` - Performance improvements
- `test:` - Testing changes
- `chore:` - Maintenance tasks
- `chore(deps):` - Dependency updates
- `chore(security):` - Security updates

### Commit Format
```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

### Examples
```
feat(cli): add new command for tool management
fix(config): resolve parsing issue with nested tables
refactor(backend): simplify plugin loading logic
doc(api): update configuration examples
test(e2e): add tests for tool installation
chore(deps): update Rust dependencies
```

### Scopes (Common)
- `cli` - Command line interface
- `config` - Configuration handling
- `backend` - Backend/plugin systems
- `tool` - Tool management
- `env` - Environment handling
- `task` - Task runner
- `api` - API changes
- `ui` - User interface
- `core` - Core functionality

## Development Guidelines

### Code Quality
- Follow existing Rust patterns and conventions
- Use `cargo fmt` for formatting (enforced by CI)
- Use `cargo clippy` for linting
- Maintain comprehensive test coverage
- Use `hk` for pre-commit hooks and linting

### Testing Requirements
- Write unit tests for new functionality (`cargo test`)
- Add E2E tests for user-facing features (`mise run test:e2e`)
- Update test snapshots when output changes (`mise run snapshots`)
- Ensure tests pass on Linux, macOS, and Windows

### Documentation
- Update documentation for new features
- Add inline code documentation
- Update CLI help text and completions
- Consider adding examples to docs/

### File Structure
```
mise/
├── src/           # Main Rust source code
├── e2e/           # End-to-end tests
├── docs/          # Documentation
├── tasks.toml     # Development tasks
├── mise.toml      # Project configuration
└── xtasks/        # Additional build scripts
```

## Code Patterns

### Error Handling
- Use `Result<T, E>` for fallible operations
- Prefer `?` operator for error propagation
- Use `miette` for user-friendly error messages
- Add context to errors with `.with_context()`

### Configuration
- Use `serde` for serialization/deserialization
- Support multiple config formats (TOML, JSON, YAML)
- Validate configuration early
- Provide helpful error messages for invalid config

### Plugin System
- Maintain compatibility with asdf plugins
- Use consistent plugin API patterns
- Handle plugin errors gracefully
- Support plugin shortcuts from registry

### CLI Design
- Use `clap` for command-line parsing
- Provide helpful error messages
- Support both short and long flags
- Include usage examples in help text

## Development Workflow

### Before Starting
1. File an issue or discuss in Discord for non-obvious changes
2. Look for "help wanted" and "good first issue" labels
3. Ensure you understand the existing patterns

### Development Process
1. Create feature branch from main
2. Write tests first (TDD approach preferred)
3. Implement feature following existing patterns
4. Run `mise run build` to verify compilation
5. Run `mise run test` to verify all tests pass
6. Run `mise run lint` to check code quality
7. Update documentation if needed
8. Commit with conventional commit format

### Pull Request Requirements
- PR title must follow conventional commit format
- All CI checks must pass (Linux, macOS, Windows)
- Tests must maintain or improve coverage
- Documentation must be updated for new features
- Code will be auto-formatted by autofix.ci

## Common Commands

### Testing
- `cargo test` - Run unit tests
- `mise run test:e2e` - Run E2E tests
- `mise run test` - Run all tests
- `./e2e/run_test test_name` - Run specific E2E test

### Development
- `mise run build` - Build the project
- `mise run lint` - Run linting
- `mise run lint:fix` - Run linting with fixes
- `mise run format` - Format code
- `mise run snapshots` - Update test snapshots
- `mise run render` - Generate docs and completions

### Quality Checks
- `hk check --all` - Run all linters
- `hk fix --all` - Run linters with fixes
- `cargo clippy` - Run Rust linting
- `cargo fmt` - Format Rust code

## Environment Setup

### For Development
```bash
# Disable mise during development testing
export MISE_DISABLE_TOOLS=1

# Set GitHub token to avoid rate limits
export MISE_GITHUB_TOKEN=your_token_here

# Use development shim
# Create ~/.local/bin/@mise with:
#!/bin/sh
exec cargo run -q --all-features --manifest-path ~/src/mise/Cargo.toml -- "$@"
```

### For Testing
```bash
# Run tests with trusted config
MISE_TRUSTED_CONFIG_PATHS=$PWD cargo test

# Run all tests including slow ones
TEST_ALL=1 mise run test:e2e
```

## Breaking Changes
- Always document breaking changes in commit messages
- Use `BREAKING CHANGE:` footer in commit message
- Consider backwards compatibility when possible
- Update migration documentation

## Security
- Use `cargo audit` to check for vulnerabilities
- Validate all user inputs
- Use secure defaults
- Follow Rust security best practices

## Performance
- Profile critical paths
- Use `criterion` for benchmarks
- Minimize allocations in hot paths
- Consider async/parallel execution for I/O

## Dependencies
- New dependencies are validated with cargo-deny
- Prefer established, well-maintained crates
- Consider licensing compatibility
- Minimize dependency footprint when possible

## When in Doubt
- Check existing code patterns
- Ask in Discord: https://discord.gg/UBa7pJUN7Z
- Reference the comprehensive contributing guide
- Look at recent PRs for examples