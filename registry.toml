# this file contains all the shorthand names for tools in mise
# the format is as follows:
# [tool-name] = [long-names...]
# multiple are allowed for each tool because some backends may be disabled, like on windows we don't use asdf, for example
# or a backend may be disabled via MISE_DISABLE_BACKENDS=ubi

[tools]
1password.aliases = ["1password-cli", "op"]
1password.description = "Password manager developed by AgileBits Inc"
1password.backends = [
    "aqua:1password/cli",
    "asdf:mise-plugins/mise-1password-cli"
]
# 1password.test = ["op --version", "{{version}}"] fails on CI for some reason
aapt2.backends = ["asdf:mise-plugins/mise-aapt2"]
aapt2.test = ["aapt2 version 2>&1", "Android Asset Packaging Tool (aapt)"]
act.description = "Run your GitHub Actions locally"
act.backends = ["aqua:nektos/act", "ubi:nektos/act", "asdf:gr1m0h/asdf-act"]
act.test = ["act --version", "act version {{version}}"]
action-validator.description = "Tool to validate GitHub Action and Workflow YAML files"
action-validator.backends = [
    "aqua:mpalmer/action-validator",
    "ubi:mpalmer/action-validator",
    "asdf:mpalmer/action-validator"
]
action-validator.os = ["linux", "macos"]
action-validator.test = [
    "action-validator --version",
    "action-validator {{version}}"
]
actionlint.description = ":octocat: Static checker for GitHub Actions workflow files"
actionlint.backends = [
    "aqua:rhysd/actionlint",
    "ubi:rhysd/actionlint",
    "asdf:crazy-matt/asdf-actionlint",
    "go:github.com/rhysd/actionlint/cmd/actionlint"
]
actionlint.test = ["actionlint --version", "{{version}}"]
adr-tools.description = "Command-line tools for working with Architecture Decision Records"
adr-tools.backends = [
    "aqua:npryce/adr-tools",
    "asdf:https://gitlab.com/td7x/asdf/adr-tools"
]
adr-tools.test = ["which adr", "adr"]
ag.backends = ["asdf:mise-plugins/mise-ag"]
age.description = "A simple, modern and secure encryption tool (and Go library) with small explicit keys, no config options, and UNIX-style composability"
age.backends = ["aqua:FiloSottile/age", "asdf:threkk/asdf-age"]
age.test = ["age --version", "v{{version}}"]
age-plugin-yubikey.backends = [
    "ubi:str4d/age-plugin-yubikey",
    "asdf:joke/asdf-age-plugin-yubikey"
]
# test seems to fail on linux
# age-plugin-yubikey.test = ["age-plugin-yubikey --version", "age-plugin-yubikey {{version}}"]
agebox.description = "Age based repository file encryption gitops tool"
agebox.backends = [
    "aqua:slok/agebox",
    "ubi:slok/agebox",
    "asdf:slok/asdf-agebox"
]
agebox.test = ["agebox --version 2>&1", "v{{version}}"]
aichat.description = "Use GPT-4(V), Gemini, LocalAI, Ollama and other LLMs in the terminal"
aichat.backends = ["aqua:sigoden/aichat"]
aichat.test = ["aichat --version", "{{version}}"]
air.description = "Live reload for Go apps"
air.backends = ["aqua:air-verse/air", "asdf:pdemagny/asdf-air"]
air.test = ["air -v", "{{version}}"]
aks-engine.description = "AKS Engine deploys and manages Kubernetes clusters in Azure"
aks-engine.backends = [
    "aqua:Azure/aks-engine",
    "asdf:robsonpeixoto/asdf-aks-engine"
]
aks-engine.test = ["aks-engine version", "Version: v{{version}}"]
allure.backends = ["asdf:mise-plugins/mise-allure"]
allure.test = ["allure --version", "{{version}}"]
allurectl.backends = ["ubi:allure-framework/allurectl"]
allurectl.test = ["allurectl --version", "allurectl version {{version}}"]
alp.description = "Access Log Profiler"
alp.backends = ["aqua:tkuchiki/alp", "asdf:asdf-community/asdf-alp"]
alp.test = ["alp --version", "{{version}}"]
amass.backends = ["ubi:owasp-amass/amass", "asdf:dhoeric/asdf-amass"]
amass.test = ["amass -version 2>&1", "v{{version}}"]
amazon-ecr-credential-helper.description = "Automatically gets credentials for Amazon ECR on docker push/docker pull"
amazon-ecr-credential-helper.backends = [
    "aqua:awslabs/amazon-ecr-credential-helper",
    "asdf:dex4er/asdf-amazon-ecr-credential-helper"
]
amazon-ecr-credential-helper.test = [
    "docker-credential-ecr-login version",
    "docker-credential-ecr-login (github.com/awslabs/amazon-ecr-credential-helper/ecr-login) {{version}}"
]
amp.description = "An agentic coding tool built by Sourcegraph"
amp.backends = ["npm:@sourcegraph/amp"]
amp.test = ["amp --version | cut -d' ' -f1", "{{version}}"]
android-sdk.backends = ["asdf:mise-plugins/mise-android-sdk"]
android-sdk.depends = ["java", "yq"]
ansible.backends = ["pipx:ansible[uvx=false,pipx_args=--include-deps]"]
ansible.test = ['ansible --version', 'ansible']
ansible-core.aliases = ["ansible-base"]
ansible-core.backends = ["pipx:ansible-core"]
ansible-core.test = ['ansible --version', 'ansible [core {{version}}]']
ant.backends = ["asdf:mise-plugins/mise-ant"]
apko.description = "Build OCI images from APK packages directly without Dockerfile"
apko.backends = [
    "aqua:chainguard-dev/apko",
    "ubi:chainguard-dev/apko",
    "asdf:omissis/asdf-apko"
]
apko.test = ["apko version", "GitVersion:    v{{version}}"]
apollo-ios.aliases = ["apollo-ios-cli"]
apollo-ios.backends = ["asdf:mise-plugins/mise-apollo-ios-cli"]
apollo-router.backends = [
    "ubi:apollographql/router",
    "asdf:safx/asdf-apollo-router"
]
apollo-router.test = ["router --version", "{{version}}"]
apollo-rover.backends = ["ubi:apollographql/rover"]
apollo-rover.test = ["rover --version", "Rover {{version}}"]
aqua.backends = ["ubi:aquaproj/aqua"]
aqua.test = ["aqua version", "{{version}}"]
arduino.aliases = ["arduino-cli"]
arduino.description = "Arduino command line tool"
arduino.backends = ["aqua:arduino/arduino-cli", "asdf:egnor/asdf-arduino-cli"]
arduino.test = ["arduino-cli version", "arduino-cli  Version: {{version}}"]
argc.backends = ["ubi:sigoden/argc"]
argc.test = ["argc --argc-version", "argc {{version}}"]
argo.description = "Argo Workflows CLI. Workflow engine for Kubernetes"
argo.backends = ["aqua:argoproj/argo-workflows", "asdf:sudermanjr/asdf-argo"]
argo.test = ["argo version", "argo: v{{version}}"]
argo-rollouts.description = "Progressive Delivery for Kubernetes"
argo-rollouts.backends = [
    "aqua:argoproj/argo-rollouts",
    "asdf:abatilo/asdf-argo-rollouts"
]
argocd.description = "Declarative continuous deployment for Kubernetes"
argocd.backends = [
    "aqua:argoproj/argo-cd",
    "ubi:argoproj/argo-cd[exe=argocd]",
    "asdf:beardix/asdf-argocd"
]
asciidoctorj.backends = ["asdf:mise-plugins/mise-asciidoctorj"]
assh.backends = ["ubi:moul/assh", "asdf:mise-plugins/mise-assh"]
assh.test = ["assh --version", "assh version "] # 2.16.0 reports version n/a
ast-grep.description = "A CLI tool for code structural search, lint and rewriting. Written in Rust"
ast-grep.backends = [
    "aqua:ast-grep/ast-grep",
    "cargo:ast-grep",
    "npm:@ast-grep/cli",
    "pipx:ast-grep-cli"
]
ast-grep.test = ["sg --version", "ast-grep {{version}}"]
astro.backends = ["ubi:astronomer/astro-cli[exe=astro]"]
astro.test = ["astro version", "Astro CLI Version: {{version}}"]
atlas.description = "A modern tool for managing database schemas"
atlas.backends = ["aqua:ariga/atlas", "asdf:komi1230/asdf-atlas"]
atmos.description = "Workflow automation tool for DevOps. Keep configuration DRY with hierarchical imports of configurations, inheritance, and WAY more. Native support for Terraform and Helmfile"
atmos.backends = ["aqua:cloudposse/atmos", "asdf:cloudposse/asdf-atmos"]
atuin.description = "âœ¨ Magical shell history"
atuin.backends = ["aqua:atuinsh/atuin", "ubi:atuinsh/atuin"]
atuin.test = ["atuin --version", "atuin {{version}}"]
auto-doc.backends = [
    "ubi:tj-actions/auto-doc",
    "asdf:mise-plugins/mise-auto-doc"
]
auto-doc.test = ["auto-doc --help", "auto-doc [flags]"]
aws-amplify.aliases = ["amplify"]
aws-amplify.backends = [
    "ubi:aws-amplify/amplify-cli[exe=amplify]",
    "asdf:LozanoMatheus/asdf-aws-amplify-cli"
]
aws-cli.aliases = ["aws", "awscli"]
aws-cli.description = "The AWS Command Line Interface (AWS CLI) is a unified tool that provides a consistent interface for interacting with all parts of Amazon Web Services"
aws-cli.backends = ["aqua:aws/aws-cli", "asdf:MetricMike/asdf-awscli"]
aws-cli.test = ["aws --version", "aws-cli/{{version}}"]
aws-cli.os = ["linux", "macos"]
aws-copilot.description = "The AWS Copilot CLI is a tool for developers to build, release and operate production ready containerized applications on AWS App Runner, Amazon ECS, and AWS Fargate"
aws-copilot.backends = ["aqua:aws/copilot-cli", "asdf:NeoHsu/asdf-copilot"]
aws-iam-authenticator.description = "A tool to use AWS IAM credentials to authenticate to a Kubernetes cluster"
aws-iam-authenticator.backends = [
    "aqua:kubernetes-sigs/aws-iam-authenticator",
    "asdf:zekker6/asdf-aws-iam-authenticator"
]
aws-nuke.description = "Remove all the resources from an AWS account"
aws-nuke.backends = ["aqua:ekristen/aws-nuke", "asdf:bersalazar/asdf-aws-nuke"]
aws-sam.aliases = ["aws-sam-cli"]
aws-sam.description = "CLI tool to build, test, debug, and deploy Serverless applications using AWS SAM"
aws-sam.backends = [
    {full = "aqua:aws/aws-sam-cli", platforms = [
        "linux",
        "macos"
    ]},
    "pipx:aws-sam-cli",
    "asdf:mise-plugins/mise-pyapp"
]
aws-sam.test = ["sam --version", "SAM CLI, version {{version}}"]
aws-sso.description = "A powerful tool for using AWS Identity Center for the CLI and web console"
aws-sso.backends = [
    "aqua:synfinatic/aws-sso-cli",
    "asdf:adamcrews/asdf-aws-sso-cli"
]
aws-vault.description = "A vault for securely storing and accessing AWS credentials in development environments"
aws-vault.backends = [
    "aqua:99designs/aws-vault",
    "asdf:karancode/asdf-aws-vault"
]
awscli-local.backends = ["asdf:mise-plugins/mise-awscli-local"]
awsebcli.backends = ["pipx:awsebcli", "asdf:mise-plugins/mise-pyapp"]
awsebcli.test = ["eb --version", "EB CLI {{version}}"]
awsls.backends = ["ubi:jckuester/awsls", "asdf:chessmango/asdf-awsls"]
awsls.test = ["awsls --version", "version: {{version}}"]
awsrm.backends = ["ubi:jckuester/awsrm", "asdf:chessmango/asdf-awsrm"]
awsrm.test = ["awsrm --version", "version: {{version}}"]
awsweeper.backends = [
    "ubi:jckuester/awsweeper",
    "asdf:chessmango/asdf-awsweeper"
]
awsweeper.test = ["awsweeper --version", "version: {{version}}"]
azure.aliases = ["azure-cli"]
azure.backends = ["asdf:mise-plugins/mise-azure-cli"]
azure-functions-core-tools.backends = [
    "asdf:mise-plugins/mise-azure-functions-core-tools"
]
azure-kubelogin.description = "A Kubernetes credential (exec) plugin implementing azure authentication"
azure-kubelogin.backends = [
    "aqua:Azure/kubelogin",
    "asdf:sechmann/asdf-kubelogin"
]
babashka.backends = [
    "ubi:babashka/babashka[exe=bb]",
    "asdf:pitch-io/asdf-babashka"
]
babashka.test = ["bb --version", "babashka v{{version}}"]
balena.aliases = ["balena-cli"]
balena.backends = [
    "ubi:balena-io/balena-cli[extract_all=true,bin_path=bin]",
    "asdf:jaredallard/asdf-balena-cli"
]
balena.test = ["balena --version", "{{version}}"]
bashbot.description = "A slack-bot written in golang for infrastructure/devops teams"
bashbot.backends = [
    "aqua:mathew-fleisch/bashbot",
    "asdf:mathew-fleisch/asdf-bashbot"
]
bashly.backends = ["asdf:mise-plugins/mise-bashly"]
bat.backends = [
    "aqua:sharkdp/bat",
    "ubi:sharkdp/bat",
    "cargo:bat",
    "asdf:https://gitlab.com/wt0f/asdf-bat"
]
bat.test = ["bat --version", "bat {{version}}"]
bat-extras.backends = ["asdf:mise-plugins/mise-bat-extras"]
bats.description = "Bash Automated Testing System"
bats.backends = ["aqua:bats-core/bats-core", "asdf:timgluz/asdf-bats"]
bats.os = ["linux", "macos"]
bats.test = ["bats -v", "Bats"]
bazel.description = "a fast, scalable, multi-language and extensible build system"
bazel.backends = [
    "aqua:bazelbuild/bazel",
    "ubi:bazelbuild/bazel",
    "asdf:rajatvig/asdf-bazel"
]
bazel.test = ["bazel --version", "bazel {{version}}"]
bazel-watcher.description = "Tools for building Bazel targets when source files change"
bazel-watcher.backends = ["aqua:bazelbuild/bazel-watcher"]
# bazel-watcher.test = [
# "ibazel version 2>&1 | head -n 1",
# "iBazel - Version v{{version}}"
# ] # test is flaky
bazelisk.description = "A user-friendly launcher for Bazel"
bazelisk.backends = [
    "aqua:bazelbuild/bazelisk",
    "asdf:josephtate/asdf-bazelisk"
]
bbr-s3-config-validator.backends = ["asdf:mise-plugins/tanzu-plug-in-for-asdf"]
# not working right with ubi
# bbr-s3-config-validator.backends = ["ubi:cloudfoundry-incubator/bosh-backup-and-restore[matching=bbr-s3-config-validator,exe=bbr-s3-config-validator]", "asdf:mise-plugins/tanzu-plug-in-for-asdf"]
# bbr-s3-config-validator.os = ["linux"]
# bbr-s3-config-validator.test = ["bbr-s3-config-validator --help", "{{version}}"]
benthos.backends = ["aqua:benthosdev/benthos", "asdf:benthosdev/benthos-asdf"]
bfs.backends = ["asdf:mise-plugins/mise-bfs"]
binnacle.description = "An opinionated tool to interact with Kubernetes' Helm"
binnacle.backends = ["aqua:Traackr/binnacle", "asdf:Traackr/asdf-binnacle"]
biome.description = "A toolchain for web projects, aimed to provide functionalities to maintain them. Biome offers formatter and linter, usable via CLI and LSP"
biome.backends = [
    "aqua:biomejs/biome",
    "ubi:biomejs/biome",
    "npm:@biomejs/biome"
]
biome.test = ["biome --version", "Version: {{version}}"]
bitwarden.description = "Bitwarden CLI"
bitwarden.backends = ["aqua:bitwarden/clients", "asdf:vixus0/asdf-bitwarden"]
bitwarden.test = ["bw --version", "{{version}}"]
bitwarden-secrets-manager.backends = [
    "ubi:bitwarden/sdk[tag_regex=^bws,exe=bws]",
    "asdf:asdf-community/asdf-bitwarden-secrets-manager"
]
# bitwarden-secrets-manager.test = ["bws -V", ""] # fails on CI for some reason
black.description = "The uncompromising Python code formatter"
black.backends = ["aqua:psf/black"]
black.test = ["black --version", "black, {{version}}"]
bob.description = "A version manager for neovim"
bob.backends = [
    # "aqua:MordechaiHadad/bob",  # +x permission not set
    "ubi:MordechaiHadad/bob[matching_regex=bob-(linux|macos|windows)-(arm|x86_64)\\.zip$]",
    "cargo:bob-nvim"
]
bob.test = ["bob --version", "bob-nvim {{version}}"]
boilerplate.description = "A tool for generating files and folders (\"boilerplate\") from a set of templates"
boilerplate.backends = ["aqua:gruntwork-io/boilerplate"]
boilerplate.test = ["boilerplate --version", "boilerplate version v{{version}}"]
bombardier.description = "Fast cross-platform HTTP benchmarking tool written in Go"
bombardier.backends = [
    "aqua:codesenberg/bombardier",
    "asdf:NeoHsu/asdf-bombardier"
]
borg.description = "Deduplicating archiver with compression and authenticated encryption"
borg.backends = ["aqua:borgbackup/borg", "asdf:lwiechec/asdf-borg"]
bosh.description = "The bosh CLI is the command line tool used for interacting with all things BOSH, from deployment operations to software release management"
bosh.backends = [
    "aqua:cloudfoundry/bosh-cli",
    "asdf:mise-plugins/tanzu-plug-in-for-asdf"
]
bosh.test = ["bosh --version", "version {{version}}"]
bosh-backup-and-restore.aliases = ["bbr"]
bosh-backup-and-restore.backends = [
    "ubi:cloudfoundry-incubator/bosh-backup-and-restore[matching=bbr-1]",
    "asdf:mise-plugins/tanzu-plug-in-for-asdf"
]
bosh-backup-and-restore.os = ["linux", "macos"]
bosh-backup-and-restore.test = [
    "bosh-backup-and-restore version",
    "bbr version {{version}}"
]
bottom.description = "Yet another cross-platform graphical process/system monitor"
bottom.backends = ["aqua:ClementTsang/bottom", "asdf:carbonteq/asdf-btm"]
bottom.test = ["btm --version", "bottom {{version}}"]
boundary.description = "Boundary enables identity-based access management for dynamic infrastructure"
boundary.backends = [
    "aqua:hashicorp/boundary",
    "asdf:mise-plugins/mise-hashicorp"
]
bpkg.backends = ["asdf:mise-plugins/mise-bpkg"]
brig.description = "Brigade CLI. Event-driven scripting for Kubernetes"
brig.backends = ["aqua:brigadecore/brigade", "asdf:Ibotta/asdf-brig"]
brig.test = ["brig version", "Brigade client: version v{{version}}"]
btop.description = "A monitor of resources"
btop.backends = ['aqua:aristocratos/btop', 'ubi:aristocratos/btop']
btop.test = [
    "btop --version | sed -e 's/\\x1b\\[[0-9;]*m//g'",
    "btop version: {{version}}"
]
btrace.backends = ["asdf:mise-plugins/mise-btrace"]
buf.description = "The best way of working with Protocol Buffers"
buf.backends = [
    "aqua:bufbuild/buf",
    "ubi:bufbuild/buf",
    "asdf:truepay/asdf-buf"
]
buildifier.backends = ["aqua:bazelbuild/buildtools/buildifier"]
buildifier.test = ["buildifier --version", "buildifier version: {{version}}"]
# test fails on windows
# buf.test = ["buf --version", "{{version}}"]
buildpack.aliases = ["pack", "buildpacks"]
buildpack.description = "CLI for building apps using Cloud Native Buildpacks"
buildpack.backends = ["aqua:buildpacks/pack", "asdf:johnlayton/asdf-buildpack"]
buildpack.test = ["pack --version", "{{version}}"]
bun.backends = ["core:bun"]
bun.test = ["bun --version", "{{version}}"]
cabal.backends = ["aqua:haskell/cabal/cabal-install"]
# cabal.test = ["cabal --version", "cabal-install version {{version}}"]
caddy.description = "Fast, multi-platform web server with automatic HTTPS"
caddy.backends = ["aqua:caddyserver/caddy", "asdf:salasrod/asdf-caddy"]
calendarsync.description = "Stateless CLI tool to sync calendars across different calendaring systems"
calendarsync.backends = [
    "aqua:inovex/CalendarSync",
    "ubi:inovex/CalendarSync",
    "asdf:FeryET/asdf-calendarsync"
]
calendarsync.test = ["CalendarSync --version", "Version: {{version}}"]
calicoctl.backends = [
    "aqua:projectcalico/calico/calicoctl",
    "asdf:TheCubicleJockey/asdf-calicoctl"
]
carapace.description = "A multi-shell completion binary"
carapace.backends = ["aqua:carapace-sh/carapace-bin"]
carapace.test = ["carapace --version 2>&1", "carapace-bin {{version}}"]
cargo-binstall.description = "Binary installation for rust projects"
cargo-binstall.backends = [
    "aqua:cargo-bins/cargo-binstall",
    'ubi:cargo-bins/cargo-binstall[tag_regex=^\\d\\.]',
    "cargo:cargo-binstall"
]
# cargo-binstall.test = ["cargo binstall -V", "{{version}}"] # flaky on windows CI
cargo-insta.description = "A snapshot testing library for rust"
cargo-insta.backends = ["aqua:mitsuhiko/insta", "ubi:mitsuhiko/insta"]
cargo-make.description = "Rust task runner and build tool"
cargo-make.backends = [
    "aqua:sagiegurari/cargo-make",
    "ubi:sagiegurari/cargo-make",
    "asdf:mise-plugins/asdf-cargo-make"
]
cargo-make.test = ["makers --version", "cargo-make {{version}}"]
carp.backends = ["ubi:carp-lang/Carp[exe=carp]", "asdf:susurri/asdf-carp"]
carthage.backends = ["asdf:mise-plugins/mise-carthage"]
ccache.backends = ["ubi:ccache/ccache", "asdf:asdf-community/asdf-ccache"]
ccache.test = ["ccache --version", "ccache version {{version}}"]
certstrap.backends = ["ubi:square/certstrap", "asdf:carnei-ro/asdf-certstrap"]
certstrap.test = ["certstrap --version", "certstrap version {{version}}"]
cf.backends = ["asdf:mise-plugins/mise-cf"]
cfn-lint.backends = ["pipx:cfn-lint"]
cfn-lint.test = ["cfn-lint --version", "cfn-lint {{version}}"]
cfssl.backends = [
    "aqua:cloudflare/cfssl/cfssl",
    "asdf:mathew-fleisch/asdf-cfssl"
]
chamber.description = "CLI for managing secrets"
chamber.backends = [
    "aqua:segmentio/chamber",
    "ubi:segmentio/chamber",
    "asdf:mintel/asdf-chamber"
]
chamber.test = ["chamber version", "chamber v{{version}}"]
changie.description = "Automated changelog tool for preparing releases with lots of customization options"
changie.backends = [
    "aqua:miniscruff/changie",
    "ubi:miniscruff/changie",
    "asdf:pdemagny/asdf-changie"
]
changie.test = ["changie --version", "changie version v{{version}}"]
cheat.description = "cheat allows you to create and view interactive cheatsheets on the command-line. It was designed to help remind *nix system administrators of options for commands that they use frequently, but not frequently enough to remember"
cheat.backends = ["aqua:cheat/cheat", "asdf:jmoratilla/asdf-cheat-plugin"]
checkmake.backends = ["aqua:mrtazz/checkmake"]
checkmake.test = ["checkmake --version", "checkmake {{version}}"]
checkov.description = "Prevent cloud misconfigurations and find vulnerabilities during build-time in infrastructure as code, container images and open source packages with Checkov by Bridgecrew"
checkov.backends = [
    "aqua:bridgecrewio/checkov",
    "ubi:bridgecrewio/checkov",
    "asdf:bosmak/asdf-checkov"
]
checkov.test = ["checkov -v", "{{version}}"]
chezmoi.description = "Manage your dotfiles across multiple diverse machines, securely"
chezmoi.backends = [
    "aqua:twpayne/chezmoi",
    "ubi:twpayne/chezmoi",
    "asdf:joke/asdf-chezmoi"
]
chezmoi.test = ["chezmoi --version", "chezmoi version v{{version}}"]
chezscheme.backends = ["asdf:mise-plugins/mise-chezscheme"]
chicken.backends = ["asdf:mise-plugins/mise-chicken"]
chisel.description = "A fast TCP/UDP tunnel over HTTP"
chisel.backends = [
    "aqua:jpillora/chisel",
    "ubi:jpillora/chisel",
    "go:github.com/jpillora/chisel",
    "asdf:lwiechec/asdf-chisel"
]
chisel.test = ["chisel --version", "{{version}}"]
choose.description = "A human-friendly and fast alternative to cut (and sometimes awk)"
choose.backends = [
    "aqua:theryangeary/choose",
    "ubi:theryangeary/choose",
    "cargo:choose",
    "asdf:carbonteq/asdf-choose"
]
choose.test = ["choose --version", "{{version}}"]
chromedriver.backends = ["asdf:mise-plugins/mise-chromedriver"]
cidr-merger.backends = ["ubi:zhanhb/cidr-merger", "asdf:ORCID/asdf-cidr-merger"]
cidr-merger.test = ["cidr-merger --version 2>&1", "cidr merger {{version}}"]
cidrchk.backends = ["ubi:mhausenblas/cidrchk", "asdf:ORCID/asdf-cidrchk"]
cidrchk.test = ["cidrchk --version", "{{version}},"]
cilium-cli.description = "CLI to install, manage & troubleshoot Kubernetes clusters running Cilium"
cilium-cli.backends = [
    "aqua:cilium/cilium-cli",
    "ubi:cilium/cilium-cli[exe=cilium]",
    "asdf:carnei-ro/asdf-cilium-cli"
]
cilium-cli.test = ["cilium version", "cilium-cli: v{{version}}"]
cilium-hubble.backends = [
    "ubi:cilium/hubble",
    "asdf:NitriKx/asdf-cilium-hubble"
]
cilium-hubble.test = ["hubble --version", "{{version}}"]
circleci.aliases = ["circleci-cli"]
circleci.description = "Use CircleCI from the command line"
circleci.backends = [
    "aqua:CircleCI-Public/circleci-cli",
    "ubi:CircleCI-Public/circleci-cli[exe=circleci]",
    "asdf:ucpr/asdf-circleci-cli"
]
circleci.test = ["circleci version", "{{version}}"]
clang.backends = ["asdf:mise-plugins/mise-llvm", "vfox:mise-plugins/vfox-clang"]
clang-format.backends = ["asdf:mise-plugins/mise-llvm"]
clangd.backends = ["asdf:mise-plugins/mise-llvm"]
clarinet.backends = ["ubi:hirosystems/clarinet", "asdf:alexgo-io/asdf-clarinet"]
clarinet.os = ["linux", "macos"]
clarinet.test = ["clarinet --version", "clarinet {{version}}"]
claude.aliases = ["claude-code"]
claude.backends = ["npm:@anthropic-ai/claude-code"]
claude.test = ["claude --version", "{{version}} (Claude Code)"]
cli53.description = "Command line tool for Amazon Route 53"
cli53.backends = ["aqua:barnybug/cli53"]
cli53.test = ["cli53 --version", "cli53 version {{version}}"]
# ubi not working on linux
# clickhouse.backends = ["ubi:ClickHouse/ClickHouse", "asdf:mise-plugins/mise-clickhouse"]
# clickhouse.os = ["linux", "macos"]
# clickhouse.test = ["ClickHouse --version", "ClickHouse local version"]
clickhouse.backends = ["asdf:mise-plugins/mise-clickhouse"]
clj-kondo.backends = ["ubi:clj-kondo/clj-kondo", "asdf:rynkowsg/asdf-clj-kondo"]
clj-kondo.test = ["clj-kondo --version", "{{version}}"]
cljstyle.backends = [
    "ubi:greglook/cljstyle",
    "asdf:abogoyavlensky/asdf-cljstyle"
]
cljstyle.os = ["linux", "macos"]
cljstyle.test = ["cljstyle version", "mvxcvi/cljstyle {{version}}"]
clojure.backends = ["asdf:mise-plugins/mise-clojure"]
cloud-sql-proxy.description = "A utility for connecting securely to your Cloud SQL instances"
cloud-sql-proxy.backends = [
    "aqua:GoogleCloudPlatform/cloud-sql-proxy",
    "asdf:pbr0ck3r/asdf-cloud-sql-proxy"
]
cloudflared.description = "cloudflared connects your machine or user identity to Cloudflare's global network"
cloudflared.backends = [
    "aqua:cloudflare/cloudflared",
    "asdf:threkk/asdf-cloudflared"
]
cloudflared.test = ["cloudflared -v", "cloudflared version {{version}}"]
clusterawsadm.backends = [
    "ubi:kubernetes-sigs/cluster-api-provider-aws",
    "asdf:kahun/asdf-clusterawsadm"
]
clusterawsadm.test = [
    "cluster-api-provider-aws version",
    "clusterawsadm version:"
]
clusterctl.description = "Home for Cluster API, a subproject of sig-cluster-lifecycle"
clusterctl.backends = [
    "aqua:kubernetes-sigs/cluster-api",
    "asdf:pfnet-research/asdf-clusterctl"
]
clusterctl.test = ["clusterctl version", "{{version}}"]
cmake.backends = [
    "asdf:mise-plugins/mise-cmake",
    "vfox:mise-plugins/vfox-cmake"
]
cmctl.description = "the command line utility that makes cert-manager'ing easier"
cmctl.backends = ["aqua:cert-manager/cmctl", "asdf:asdf-community/asdf-cmctl"]
cmdx.description = "Task runner. It provides useful help messages and supports interactive prompts and validation of arguments"
cmdx.backends = ["aqua:suzuki-shunsuke/cmdx", "ubi:suzuki-shunsuke/cmdx"]
cmdx.test = ["cmdx version", "cmdx version {{version}}"]
cockroach.description = "A distributed SQL database designed for speed, scale, and survival"
cockroach.backends = [
    "aqua:cockroachdb/cockroach",
    "asdf:salasrod/asdf-cockroach"
]
cockroach.test = ["cockroach version", "v{{version}}"]
cocoapods.backends = ["asdf:mise-plugins/mise-cocoapods"]
cocogitto.test = ["cog --version", "cog {{version}}"]
cocogitto.description = "The Conventional Commits toolbox"
cocogitto.backends = ["aqua:cocogitto/cocogitto"]
codebuff.backends = ["npm:codebuff"]
codefresh.backends = [
    "ubi:codefresh-io/cli[exe=codefresh]",
    "asdf:gurukulkarni/asdf-codefresh"
]
codeql.backends = ["asdf:mise-plugins/mise-codeql"]
coder.description = "Provision remote development environments via Terraform"
coder.backends = ["aqua:coder/coder", "asdf:mise-plugins/asdf-coder"]
colima.description = "Container runtimes on macOS (and Linux) with minimal setup"
colima.backends = [
    "aqua:abiosoft/colima",
    "ubi:abiosoft/colima",
    "asdf:CrouchingMuppet/asdf-colima"
]
colima.test = ["colima --version", "colima version v{{version}}"]
committed.description = "Nitpicking commit history since beabf39"
committed.backends = ["aqua:crate-ci/committed"]
conan.backends = ["pipx:conan", "asdf:mise-plugins/mise-pyapp"]
conan.test = ["conan --version", "Conan version {{version}}"]
concourse.backends = [
    "aqua:concourse/concourse/concourse",
    "asdf:mattysweeps/asdf-concourse"
]
conduit.backends = ["ubi:ConduitIO/conduit", "asdf:gmcabrita/asdf-conduit"]
conduit.test = ["conduit --version", "v{{version}}"]
conform.description = "Policy enforcement for your pipelines"
conform.backends = ["aqua:siderolabs/conform", "asdf:skyzyx/asdf-conform"]
conform.os = ["linux", "macos"]
conform.test = ["conform version", "conform version v{{version}}"]
conftest.description = "Write tests against structured configuration data using the Open Policy Agent Rego query language"
conftest.backends = [
    "aqua:open-policy-agent/conftest",
    "asdf:looztra/asdf-conftest"
]
consul.description = "Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure"
consul.backends = ["aqua:hashicorp/consul", "asdf:mise-plugins/mise-hashicorp"]
container.description = "A tool for creating and running Linux containers using lightweight virtual machines on a Mac."
container.backends = ["aqua:apple/container", "ubi:apple/container"]
container.os = ["macos"]
container.test = ["container --version", "container CLI version {{version}}"]
container-structure-test.description = "validate the structure of your container images"
container-structure-test.backends = [
    "aqua:GoogleContainerTools/container-structure-test",
    "asdf:FeryET/asdf-container-structure-test"
]
cookiecutter.backends = [
    "pipx:cookiecutter",
    "asdf:shawon-crosen/asdf-cookiecutter"
]
copier.backends = ["pipx:copier", "asdf:looztra/asdf-copier"]
copier.test = ["copier --version", "copier {{version}}"]
copper.description = "A configuration file validator for Kubernetes"
copper.backends = [
    "aqua:cloud66-oss/copper",
    "ubi:cloud66-oss/copper",
    "asdf:vladlosev/asdf-copper"
]
copper.os = ["linux", "macos"]
copper.test = ["copper version", ""]
coq.backends = ["asdf:mise-plugins/mise-coq"]
coredns.backends = ["ubi:coredns/coredns", "asdf:s3than/asdf-coredns"]
coredns.test = ["coredns --version", "CoreDNS-{{version}}"]
coreutils.description = "Cross-platform Rust rewrite of the GNU coreutils"
coreutils.backends = ["aqua:uutils/coreutils", "ubi:uutils/coreutils"]
coreutils.test = ["coreutils", "coreutils {{version}}"]
cosign.description = "Code signing and transparency for containers and binaries"
cosign.backends = [
    "aqua:sigstore/cosign",
    "asdf:https://gitlab.com/wt0f/asdf-cosign"
]
cosign.test = ["cosign version", "v{{version}}"]
coursier.backends = [
    "ubi:coursier/coursier[exe=cs]",
    "asdf:jiahuili430/asdf-coursier"
]
cowsay.backends = ["npm:cowsay"]
crane.description = "Go library and CLIs for working with container registries"
crane.backends = [
    "aqua:google/go-containerregistry",
    "ubi:google/go-containerregistry[exe=crane]",
    "asdf:dmpe/asdf-crane"
]
crane.test = ["crane version", "{{version}}"]
crc.backends = ["asdf:mise-plugins/mise-crc"]
credhub.description = "CredHub CLI provides a command line interface to interact with CredHub servers"
credhub.backends = [
    "aqua:cloudfoundry/credhub-cli",
    "asdf:mise-plugins/tanzu-plug-in-for-asdf"
]
credhub.test = ["credhub --version", "CLI Version: {{version}}"]
crictl.backends = [
    "aqua:kubernetes-sigs/cri-tools/crictl",
    "asdf:FairwindsOps/asdf-crictl"
]
crossplane.aliases = ["crossplane-cli"]
crossplane.description = "The Crossplane CLI extends kubectl with functionality to build, push, and install Crossplane packages"
crossplane.backends = [
    "aqua:crossplane/crossplane",
    "asdf:joke/asdf-crossplane-cli"
]
crystal.backends = [
    "asdf:mise-plugins/mise-crystal",
    "vfox:mise-plugins/vfox-crystal"
]
cspell.backends = ["npm:cspell"]
cspell.test = ["cspell --version", "{{version}}"]
ctlptl.description = "Making local Kubernetes clusters fun and easy to set up"
ctlptl.backends = ["aqua:tilt-dev/ctlptl", "asdf:ezcater/asdf-ctlptl"]
ctop.description = "Top-like interface for container metrics"
ctop.backends = ["aqua:bcicen/ctop", "ubi:bcicen/ctop", "asdf:NeoHsu/asdf-ctop"]
ctop.test = ["ctop -v", "ctop version {{version}}"]
cue.description = "The home of the CUE language! Validate and define text-based and dynamic configuration"
cue.backends = ["aqua:cue-lang/cue", "asdf:asdf-community/asdf-cue"]
curlie.test = ["curlie version", "curlie {{version}}"]
curlie.description = "The power of curl, the ease of use of httpie"
curlie.backends = ["aqua:rs/curlie"]
cyclonedx.description = "CycloneDX CLI tool for SBOM analysis, merging, diffs and format conversions"
cyclonedx.backends = [
    "aqua:CycloneDX/cyclonedx-cli",
    "asdf:xeedio/asdf-cyclonedx"
]
# cyclonedx.test = ["cyclonedx --version", "{{version}}"] # flaky
dagger.description = "A portable devkit for CI/CD pipelines"
dagger.backends = ["aqua:dagger/dagger", "asdf:virtualstaticvoid/asdf-dagger"]
dagu.description = "Yet another cron alternative with a Web UI, but with much more capabilities. It aims to solve greater problems"
dagu.backends = ["aqua:dagu-org/dagu", "ubi:dagu-org/dagu"]
dagu.test = ["dagu version 2>&1", "{{version}}"]
danger-js.backends = ["asdf:mise-plugins/mise-danger-js"]
danger-swift.backends = ["spm:danger/swift"]
dapr.description = "Command-line tools for Dapr"
dapr.backends = ["aqua:dapr/cli", "asdf:asdf-community/asdf-dapr-cli"]
dapr.test = ["dapr --version", "CLI version: {{version}}"]
dart.backends = ["asdf:mise-plugins/mise-dart", "vfox:mise-plugins/vfox-dart"]
dasel.description = "Select, put and delete data from JSON, TOML, YAML, XML and CSV files with a single tool. Supports conversion between formats and can be used as a Go package"
dasel.backends = ["aqua:TomWright/dasel", "asdf:asdf-community/asdf-dasel"]
databricks-cli.backends = ["ubi:databricks/cli[exe=databricks]"]
databricks-cli.test = ["databricks --version", "Databricks CLI v{{version}}"]
datree.description = "Prevent Kubernetes misconfigurations from reaching production (again  )! From code to cloud, Datree provides an E2E policy enforcement solution to run automatic checks for rule violations. See our docs: https://hub.datree.io"
datree.backends = ["aqua:datreeio/datree", "asdf:lukeab/asdf-datree"]
daytona.backends = ["asdf:mise-plugins/mise-daytona"]
dbmate.description = "A lightweight, framework-agnostic database migration tool"
dbmate.backends = ["aqua:amacneil/dbmate", "asdf:juusujanar/asdf-dbmate"]
deck.description = "decK: Configuration management and drift detection for Kong"
deck.backends = ["aqua:Kong/deck", "asdf:nutellinoit/asdf-deck"]
delta.description = "A syntax-highlighting pager for git, diff, and grep output"
delta.backends = [
    "aqua:dandavison/delta",
    "ubi:dandavison/delta",
    "asdf:andweeb/asdf-delta",
    "cargo:git-delta"
]
delta.test = ["delta --version", "delta {{version}}"]
deno.backends = ["core:deno"]
depot.backends = ["ubi:depot/cli[exe=depot]", "asdf:depot/asdf-depot"]
depot.test = ["depot --version", "depot version {{version}}"]
desk.description = "A lightweight workspace manager for the shell"
desk.backends = ["aqua:jamesob/desk", "asdf:endorama/asdf-desk"]
desk.os = ["linux", "macos"]
desk.test = ["desk version", "desk {{version}}"]
devspace.description = "DevSpace - The Fastest Developer Tool for Kubernetes  Automate your deployment workflow with DevSpace and develop software directly inside Kubernetes"
devspace.backends = ["aqua:devspace-sh/devspace", "asdf:NeoHsu/asdf-devspace"]
# dhall seems to not provide any releases in the latest
# dhall.backends = ["aqua:dhall-lang/dhall-haskell", "asdf:mise-plugins/mise-dhall"]
dhall.backends = ["asdf:mise-plugins/mise-dhall"]
diffoci.description = "diff for Docker and OCI container images"
diffoci.backends = ["aqua:reproducible-containers/diffoci"]
diffoci.test = ["diffoci --version", "diffoci version v{{version}}"]
difftastic.description = "a structural diff that understands syntax"
difftastic.backends = [
    "aqua:Wilfred/difftastic",
    "ubi:Wilfred/difftastic[exe=difft]",
    "asdf:volf52/asdf-difftastic"
]
difftastic.test = ["difft --version", "Difftastic {{version}}"]
digdag.backends = ["asdf:mise-plugins/mise-digdag"]
direnv.description = "unclutter your .profile"
direnv.backends = ["aqua:direnv/direnv", "asdf:asdf-community/asdf-direnv"]
dive.description = "A tool for exploring each layer in a docker image"
dive.backends = [
    "aqua:wagoodman/dive",
    "ubi:wagoodman/dive",
    "asdf:looztra/asdf-dive"
]
dive.test = ["dive --version", "dive {{version}}"]
djinni.backends = [
    "ubi:cross-language-cpp/djinni-generator",
    "asdf:cross-language-cpp/asdf-djinni"
]
# djinni.test = ["djinni-generator --version", "djinni generator version {{version}}"] # test fails on windows
dmd.backends = ["asdf:mise-plugins/mise-dmd"]
docker-cli.description = "Docker CE CLI"
docker-cli.backends = ["aqua:docker/cli"]
docker-cli.test = [
    "docker --version | awk '{print $3}' | tr -d ','",
    "{{version}}"
]
docker-compose.description = "Define and run multi-container applications with Docker"
docker-compose.backends = ["aqua:docker/compose"]
docker-compose.test = [
    "docker-cli-plugin-docker-compose --version",
    "Docker Compose version"
]
docker-slim.description = "minT(oolkit): Mint awesome, secure and production ready containers just the way you need them! Don't change anything in your container image and minify it by up to 30x (and for compiled languages even more) making it secure too! (free and open source)"
docker-slim.backends = [
    "aqua:mintoolkit/mint",
    "ubi:mintoolkit/mint[extract_all=true]",
    "asdf:xataz/asdf-docker-slim"
]
docker-slim.os = ["linux", "macos"]
# docker-slim.test = ["slim --version", ""] # prints out weird version of mint or something
dockle.description = "Container Image Linter for Security, Helping build the Best-Practice Docker Image, Easy to start"
dockle.backends = [
    "aqua:goodwithtech/dockle",
    "asdf:mathew-fleisch/asdf-dockle"
]
doctl.description = "The official command line interface for the DigitalOcean API"
doctl.backends = [
    "aqua:digitalocean/doctl",
    "ubi:digitalocean/doctl",
    "asdf:maristgeek/asdf-doctl"
]
doctl.test = ["doctl version", "doctl version {{version}}"]
doctoolchain.backends = ["asdf:mise-plugins/mise-doctoolchain"]
docuum.description = "Docuum performs least recently used (LRU) eviction of Docker images"
docuum.backends = [
    "aqua:stepchowfun/docuum",
    "ubi:stepchowfun/docuum",
    "cargo:docuum",
    "asdf:bradym/asdf-docuum"
]
docuum.test = ["docuum --version", "Docuum {{version}}"]
doggo.description = ":dog: Command-line DNS Client for Humans. Written in Golang"
doggo.backends = ["aqua:mr-karan/doggo", "ubi:mr-karan/doggo"]
doggo.test = ["doggo --version | awk '{print $1}'", "v{{version}}"]
dome.backends = ["asdf:mise-plugins/mise-dome"]
doppler.backends = [
    "ubi:DopplerHQ/cli[exe=doppler]",
    "asdf:takutakahashi/asdf-doppler"
]
doppler.test = ["doppler --version", "v{{version}}"]
dotenv-linter.description = "Lightning-fast linter for .env files. Written in Rust"
dotenv-linter.backends = [
    "aqua:dotenv-linter/dotenv-linter",
    "ubi:dotenv-linter/dotenv-linter",
    "asdf:wesleimp/asdf-dotenv-linter"
]
dotenv-linter.test = ["dotenv-linter --version", "dotenv-linter {{version}}"]
dotenvx.description = "a secure dotenvâ€“from the creator of `dotenv`"
dotenvx.backends = ["aqua:dotenvx/dotenvx", "ubi:dotenvx/dotenvx"]
dotenvx.test = ["dotenvx --version", "{{version}}"]
dotnet.backends = [
    "asdf:mise-plugins/mise-dotnet",
    "vfox:mise-plugins/vfox-dotnet"
]
dotnet-core.backends = ["asdf:mise-plugins/mise-dotnet-core"]
dotslash.backends = ["ubi:facebook/dotslash"]
dotslash.test = ["dotslash --version", "DotSlash"]
dotty.backends = ["asdf:mise-plugins/mise-dotty"]
dprint.description = "Pluggable and configurable code formatting platform written in Rust"
dprint.backends = ["aqua:dprint/dprint", "asdf:asdf-community/asdf-dprint"]
draft.description = "A day 0 tool for getting your app on k8s fast"
draft.backends = ["aqua:Azure/draft", "asdf:kristoflemmens/asdf-draft"]
driftctl.description = "Detect, track and alert on infrastructure drift"
driftctl.backends = ["aqua:snyk/driftctl", "asdf:nlamirault/asdf-driftctl"]
drone.description = "Command Line Tools for Drone CI"
drone.backends = [
    "aqua:harness/drone-cli",
    "ubi:harness/drone-cli[exe=drone]",
    "asdf:virtualstaticvoid/asdf-drone"
]
drone.test = ["drone --version", "drone version {{version}}"]
dt.description = "dt - duct tape for your unix pipes"
dt.backends = ["aqua:so-dang-cool/dt", "asdf:so-dang-cool/asdf-dt"]
dtm.backends = [
    "ubi:devstream-io/devstream[exe=dtm]",
    "asdf:zhenyuanlau/asdf-dtm"
]
dua.description = "View disk space usage and delete unwanted data, fast"
dua.backends = ["aqua:Byron/dua-cli", "ubi:Byron/dua-cli[exe=dua]"]
dua.test = ["dua --version", "dua {{version}}"]
duckdb.description = "DuckDB is an analytical in-process SQL database management system"
duckdb.backends = ["aqua:duckdb/duckdb", "ubi:duckdb/duckdb"]
duckdb.test = ["duckdb --version", "{{version}}"]
duf.description = "Disk Usage/Free Utility - a better 'df' alternative"
duf.backends = ["aqua:muesli/duf", "asdf:NeoHsu/asdf-duf"]
dust.description = "A more intuitive version of du in rust"
dust.backends = [
    "aqua:bootandy/dust",
    "ubi:bootandy/dust",
    "asdf:looztra/asdf-dust"
]
dust.test = ["dust --version", "Dust {{version}}"]
dvc.backends = ["asdf:mise-plugins/mise-dvc"]
dyff.description = "A diff tool for YAML files, and sometimes JSON"
dyff.backends = ["aqua:homeport/dyff", "asdf:https://gitlab.com/wt0f/asdf-dyff"]
dynatrace-monaco.backends = [
    "ubi:Dynatrace/dynatrace-configuration-as-code[exe=monaco]",
    "asdf:nsaputro/asdf-monaco"
]
e1s.backends = ["asdf:tbobm/asdf-e1s"]
earthly.description = "Repeatable builds"
earthly.backends = ["aqua:earthly/earthly", "asdf:YR-ZR0/asdf-earthly"]
ecspresso.description = "ecspresso is a deployment tool for Amazon ECS"
ecspresso.backends = ["aqua:kayac/ecspresso", "asdf:kayac/asdf-ecspresso"]
edit.description = "We all edit"
edit.backends = ["aqua:microsoft/edit"]
# edit.test = ["edit --version", "edit version {{version}}"]
editorconfig-checker.description = "A tool to verify that your files are in harmony with your .editorconfig"
editorconfig-checker.backends = [
    "aqua:editorconfig-checker/editorconfig-checker",
    "ubi:editorconfig-checker/editorconfig-checker[exe=ec]",
    "asdf:gabitchov/asdf-editorconfig-checker"
]
editorconfig-checker.test = ["ec --version", "v{{version}}"]
ejson.description = "EJSON is a small library to manage encrypted secrets using asymmetric encryption"
ejson.backends = ["aqua:Shopify/ejson", "asdf:cipherstash/asdf-ejson"]
eksctl.description = "The official CLI for Amazon EKS"
eksctl.backends = ["aqua:eksctl-io/eksctl", "asdf:elementalvoid/asdf-eksctl"]
elasticsearch.backends = ["asdf:mise-plugins/mise-elasticsearch"]
elixir.backends = ["core:elixir"]
elixir.depends = ["erlang"]
elixir-ls.backends = ["asdf:mise-plugins/mise-elixir-ls"]
elm.backends = ["ubi:elm/compiler[exe=elm]", "asdf:asdf-community/asdf-elm"]
elm.test = ["elm --version", "{{version}}"]
emsdk.backends = ["asdf:mise-plugins/mise-emsdk"]
envcli.description = "Don't install Node, Go, ... locally - use containers you define within your project. If you have a new machine / other contributors you just have to install docker and envcli to get started"
envcli.backends = [
    "aqua:EnvCLI/EnvCLI",
    "ubi:EnvCLI/EnvCLI[exe=envcli]",
    "asdf:zekker6/asdf-envcli"
]
envcli.test = ["envcli --version", "EnvCLI version {{version}}"]
envsubst.description = "Environment variables substitution for Go"
envsubst.backends = ["aqua:a8m/envsubst", "asdf:dex4er/asdf-envsubst"]
ephemeral-postgres.backends = ["asdf:mise-plugins/mise-ephemeral-postgres"]
erlang.backends = ["core:erlang"]
esc.description = "Pulumi ESC is a centralized, secure service for environments, secrets, and configuration management, optimized for multi-cloud infrastructures and applications"
esc.backends = ["aqua:pulumi/esc", "ubi:pulumi/esc", "asdf:fxsalazar/asdf-esc"]
esc.test = ["esc version", "v{{version}}"]
esy.backends = ["asdf:mise-plugins/mise-esy"]
etcd.description = "Distributed reliable key-value store for the most critical data of a distributed system"
etcd.backends = [
    "aqua:etcd-io/etcd",
    "asdf:particledecay/asdf-etcd",
    "vfox:mise-plugins/vfox-etcd"
]
etcd.test = ["etcd --version", "etcd Version: {{version}}"]
evans.description = "Evans: more expressive universal gRPC client"
evans.backends = ["aqua:ktr0731/evans", "asdf:goki90210/asdf-evans"]
eza.description = "A modern, maintained replacement for ls"
eza.backends = [
    {full = "aqua:eza-community/eza", platforms = ["linux"]},
    # "ubi:eza-community/eza", # cannot install on macos
    "asdf:mise-plugins/mise-eza",
    "cargo:eza"
]
eza.test = ["eza --version", "v{{version}}"]
fastfetch.description = "An actively maintained, feature-rich and performance oriented, neofetch like system information tool"
fastfetch.backends = ["aqua:fastfetch-cli/fastfetch"]
fastfetch.test = [
    "fastfetch --version | awk '{print $1, $2}'",
    "fastfetch {{version}}"
]
fd.description = "A simple, fast and user-friendly alternative to 'find'"
fd.backends = [
    "aqua:sharkdp/fd",
    "ubi:sharkdp/fd",
    "asdf:https://gitlab.com/wt0f/asdf-fd",
    "cargo:fd-find"
]
fd.test = ["fd --version", "fd {{version}}"]
ffmpeg.backends = ["asdf:mise-plugins/mise-ffmpeg"]
figma-export.backends = [
    "ubi:RedMadRobot/figma-export",
    "asdf:younke/asdf-figma-export"
]
# figma-export.test = ["figma-export --version", "{{version}}"] flaky
fillin.description = "fill-in your command and execute"
fillin.backends = ["aqua:itchyny/fillin", "asdf:ouest/asdf-fillin"]
firebase.description = "The Firebase Command Line Tools"
firebase.backends = [
    "aqua:firebase/firebase-tools",
    "asdf:jthegedus/asdf-firebase"
]
# firebase.test = ["firebase --version", "{{version}}"] # partial releases break test
fission.description = "Fast and Simple Serverless Functions for Kubernetes"
fission.backends = [
    "aqua:fission/fission",
    "asdf:virtualstaticvoid/asdf-fission"
]
flamingo.backends = [
    "ubi:flux-subsystem-argo/flamingo",
    "asdf:log2/asdf-flamingo"
]
flamingo.test = ["flamingo -v", "flamingo version {{version}}"]
flarectl.backends = [
    "ubi:cloudflare/cloudflare-go[exe=flarectl]",
    "asdf:mise-plugins/asdf-flarectl"
]
# flarectl.test = ["flarectl --version", "flarectl version {{version}}"] # flarectl removed since v4
flatc.backends = [
    "ubi:google/flatbuffers[exe=flatc]",
    "asdf:TheOpenDictionary/asdf-flatc"
]
flatc.test = ["flatc --version", "flatc version {{version}}"]
flutter.backends = [
    "asdf:mise-plugins/mise-flutter",
    "vfox:mise-plugins/vfox-flutter"
]
fluttergen.backends = [
    "ubi:FlutterGen/flutter_gen[exe=fluttergen]",
    "asdf:FlutterGen/asdf-fluttergen"
]
fluttergen.os = ["linux", "macos"]
fluttergen.test = ["fluttergen --version", "v{{version}}"]
flux2.description = "Open and extensible continuous delivery solution for Kubernetes. Powered by GitOps Toolkit"
flux2.backends = ["aqua:fluxcd/flux2", "asdf:tablexi/asdf-flux2"]
flux2.test = ["flux --version", "flux version {{version}}"]
fly.backends = [
    "aqua:concourse/concourse/fly",
    "asdf:mise-plugins/tanzu-plug-in-for-asdf"
]
flyctl.description = "Command line tools for fly.io services"
flyctl.backends = [
    "aqua:superfly/flyctl",
    "ubi:superfly/flyctl",
    "asdf:chessmango/asdf-flyctl"
]
flyway.backends = ["asdf:mise-plugins/mise-flyway"]
foundry.description = "Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust"
foundry.backends = [
    "aqua:foundry-rs/foundry",
    "ubi:foundry-rs/foundry[extract_all=true]"
]
foundry.test = ["forge -V", "{{version}}"]
func-e.backends = ["ubi:tetratelabs/func-e", "asdf:mise-plugins/mise-func-e"]
func-e.test = ["func-e --version", "func-e version {{version}}"]
furyctl.backends = ["ubi:sighupio/furyctl", "asdf:sighupio/asdf-furyctl"]
furyctl.os = ["linux", "macos"]
furyctl.test = ["furyctl version", "{{version}}"]
fx.description = "Command-line tool and terminal JSON viewer"
fx.backends = ["aqua:antonmedv/fx", "asdf:https://gitlab.com/wt0f/asdf-fx"]
fzf.description = ":cherry_blossom: A command-line fuzzy finder"
fzf.backends = [
    "aqua:junegunn/fzf",
    "ubi:junegunn/fzf",
    "asdf:kompiro/asdf-fzf"
]
fzf.test = ["fzf --version", "{{version}}"]
gallery-dl.backends = ["asdf:mise-plugins/mise-gallery-dl"]
gam.backends = ["ubi:GAM-team/GAM[exe=gam]", "asdf:offbyone/asdf-gam"]
gator.description = "Gatekeeper - Policy Controller for Kubernetes"
gator.backends = [
    "aqua:open-policy-agent/gatekeeper",
    "ubi:open-policy-agent/gatekeeper[exe=gator]",
    "asdf:MxNxPx/asdf-gator"
]
gator.test = ["gator --version", "gator version v{{version}}"]
gauche.backends = ["asdf:mise-plugins/mise-gauche"]
gcc-arm-none-eabi.backends = ["asdf:mise-plugins/mise-gcc-arm-none-eabi"]
gcloud.backends = ["asdf:mise-plugins/mise-gcloud"]
gcloud.depends = ["python"]
gdu.description = "Fast disk usage analyzer with console interface written in Go"
gdu.backends = ["aqua:dundee/gdu"]
gemini-cli.aliases = ["gemini"]
gemini-cli.backends = ["npm:@google/gemini-cli"]
gemini-cli.test = ["gemini --version", "{{version}}"]
getenvoy.backends = [
    "ubi:tetratelabs-attic/getenvoy",
    "asdf:mise-plugins/mise-getenvoy"
]
getenvoy.test = ["getenvoy --version", "getenvoy version {{version}}"]
ghalint.description = "GitHub Actions linter"
ghalint.backends = [
    "aqua:suzuki-shunsuke/ghalint",
    "ubi:suzuki-shunsuke/ghalint"
]
ghalint.test = ["ghalint version", "{{version}}"]
ghc.backends = ["asdf:mise-plugins/mise-ghcup"]
# takes forever
# ghc.test = ["ghc --version", "The Glorious Glasgow Haskell Compilation System, version {{version}}"]
ghcup.description = "GHCup is an installer for the general purpose language Haskell"
ghcup.backends = [
    "aqua:haskell/ghcup-hs",
    "ubi:haskell/ghcup-hs[exe=ghcup]",
    "asdf:mise-plugins/mise-ghcup"
]
ghcup.os = ["linux", "macos"]
ghcup.test = [
    "ghcup --version",
    "The GHCup Haskell installer, version {{version}}"
]
ghidra.backends = ["asdf:mise-plugins/mise-ghidra"]
ghorg.description = "Quickly clone an entire org/users repositories into one directory - Supports GitHub, GitLab, Bitbucket, and more"
ghorg.backends = ["aqua:gabrie30/ghorg", "asdf:gbloquel/asdf-ghorg"]
ghq.description = "Remote repository management made easy"
ghq.backends = ["aqua:x-motemen/ghq", "asdf:kajisha/asdf-ghq"]
ginkgo.backends = [
    "go:github.com/onsi/ginkgo/v2/ginkgo",
    "asdf:mise-plugins/mise-ginkgo"
]
ginkgo.test = ['ginkgo version', 'Ginkgo Version {{version}}']
git-chglog.description = "CHANGELOG generator implemented in Go (Golang)"
git-chglog.backends = [
    "aqua:git-chglog/git-chglog",
    "asdf:GoodwayGroup/asdf-git-chglog"
]
git-cliff.description = "A highly customizable Changelog Generator that follows Conventional Commit specifications"
git-cliff.backends = ["aqua:orhun/git-cliff", "asdf:jylenhof/asdf-git-cliff"]
git-cliff.test = ["git-cliff --version", "git-cliff {{version}}"]
git-lfs.description = "Git extension for versioning large files"
git-lfs.backends = ["aqua:git-lfs/git-lfs", "ubi:git-lfs/git-lfs"]
git-lfs.test = ["git-lfs --version", "git-lfs/{{version}}"]
gitconfig.backends = ["ubi:0ghny/gitconfig", "asdf:0ghny/asdf-gitconfig"]
gitconfig.test = ["gitconfig --version", "gitconfig version {{version}}"]
github-cli.aliases = ["gh"]
github-cli.description = "GitHubâ€™s official command line tool"
github-cli.backends = [
    "aqua:cli/cli",
    "ubi:cli/cli[exe=gh]",
    "asdf:bartlomiejdanek/asdf-github-cli"
]
github-cli.test = ["gh --version", "gh version {{version}}"]
github-markdown-toc.description = "Easy TOC creation for GitHub README.md"
github-markdown-toc.backends = [
    "aqua:ekalinin/github-markdown-toc",
    "asdf:skyzyx/asdf-github-markdown-toc"
]
github-markdown-toc.test = ["gh-md-toc --version", "{{version}}"]
gitleaks.description = "Find secrets with Gitleaks"
gitleaks.backends = ["aqua:gitleaks/gitleaks", "asdf:jmcvetta/asdf-gitleaks"]
gitleaks.test = ["gitleaks --version", "gitleaks version {{version}}"]
gitsign.description = "Keyless Git signing using Sigstore"
gitsign.backends = ["aqua:sigstore/gitsign", "asdf:spencergilbert/asdf-gitsign"]
gitsign.os = ["linux", "macos"]
gitsign.test = ["gitsign --version", "gitsign version v{{version}}"]
gitu.backends = [
    # "aqua:altsem/gitu", # +x permission not set
    "ubi:altsem/gitu",
    "cargo:gitu"
]
gitu.test = ["gitu --version", "gitu v{{version}}"]
gitui.backends = ["aqua:extrawurst/gitui", "asdf:looztra/asdf-gitui"]
gitversion.description = "From git log to SemVer in no time"
gitversion.backends = ["aqua:gittools/gitversion", "ubi:gittools/gitversion"]
glab.backends = [
    {full = "ubi:gitlab-org/cli[provider=gitlab,exe=glab]", platforms = [
        "linux",
        "macos"
    ]},
    {full = "ubi:gitlab-org/cli[provider=gitlab,exe=glab,matching_regex=^glab\\.exe$]", platforms = [
        "windows"
    ]},
    "asdf:mise-plugins/mise-glab"
]
glab.test = ["glab version", "glab {{version}}"]
gleam.description = "A friendly language for building type-safe, scalable systems"
gleam.backends = ["aqua:gleam-lang/gleam", "asdf:asdf-community/asdf-gleam"]
gleam.test = ["gleam --version", "gleam {{version}}"]
glen.backends = ["ubi:lingrino/glen", "asdf:bradym/asdf-glen"]
glen.test = ["glen version", "{{version}}"]
glooctl.backends = ["ubi:solo-io/gloo", "asdf:halilkaya/asdf-glooctl"]
glow.description = "Render markdown on the CLI, with pizzazz"
glow.backends = ["aqua:charmbracelet/glow", "asdf:mise-plugins/asdf-glow"]
go.backends = ["core:go"]
go-containerregistry.description = "Go library and CLIs for working with container registries"
go-containerregistry.backends = [
    "aqua:google/go-containerregistry",
    "asdf:dex4er/asdf-go-containerregistry"
]
go-getter.description = "Package for downloading things from a string URL using a variety of protocols"
go-getter.backends = [
    "aqua:hashicorp/go-getter",
    "asdf:mise-plugins/mise-go-getter"
]
go-getter.test = ["which go-getter", "go-getter"]
go-jira.description = "simple jira command line client in Go"
go-jira.backends = ["aqua:go-jira/jira", "asdf:dguihal/asdf-go-jira"]
go-jsonnet.backends = [
    "aqua:google/go-jsonnet",
    "asdf:https://gitlab.com/craigfurman/asdf-go-jsonnet"
]
go-junit-report.description = "Convert Go test output to JUnit XML"
go-junit-report.backends = [
    "aqua:jstemmer/go-junit-report",
    "ubi:jstemmer/go-junit-report",
    "asdf:jwillker/asdf-go-junit-report"
]
go-junit-report.test = ["go-junit-report --version", "{{version}}"]
go-sdk.backends = ["asdf:mise-plugins/mise-go-sdk"]
go-swagger.description = "Swagger 2.0 implementation for go"
go-swagger.backends = [
    "aqua:go-swagger/go-swagger",
    "asdf:jfreeland/asdf-go-swagger"
]
go-swagger.os = ["linux", "macos"]
go-swagger.test = ["swagger version", "version: v{{version}}"]
goconvey.backends = [
    "go:github.com/smartystreets/goconvey",
    "asdf:mise-plugins/mise-goconvey"
]
gocryptfs.description = "Encrypted overlay filesystem written in Go"
gocryptfs.backends = ["aqua:rfjakob/gocryptfs", "ubi:rfjakob/gocryptfs"]
gofumpt.description = "A stricter gofmt"
gofumpt.backends = [
    "aqua:mvdan/gofumpt",
    "ubi:mvdan/gofumpt",
    "asdf:looztra/asdf-gofumpt"
]
gofumpt.test = ["gofumpt --version", "v{{version}}"]
gojq.description = "Pure Go implementation of jq"
gojq.backends = [
    "aqua:itchyny/gojq",
    "ubi:itchyny/gojq",
    "asdf:jimmidyson/asdf-gojq",
    "go:github.com/itchyny/gojq/cmd/gojq"
]
gojq.test = ["gojq --version", "gojq {{version}}"]
gokey.description = "A simple vaultless password manager in Go"
gokey.backends = ["aqua:cloudflare/gokey", "ubi:cloudflare/gokey"]
gokey.test = ["gokey -p master -r realm -l 8", "hJ2gXSy["]
golangci-lint.description = "Fast linters Runner for Go"
golangci-lint.backends = [
    "aqua:golangci/golangci-lint",
    "ubi:golangci/golangci-lint",
    "asdf:hypnoglow/asdf-golangci-lint"
]
golangci-lint-langserver.description = "golangci-lint language server"
golangci-lint-langserver.backends = [
    "aqua:nametake/golangci-lint-langserver",
    "ubi:nametake/golangci-lint-langserver",
    "go:github.com/nametake/golangci-lint-langserver"
]
golangci-lint-langserver.test = [
    "which golangci-lint-langserver",
    "golangci-lint-langserver"
]
golines.description = "A golang formatter that fixes long lines"
golines.backends = [
    {full = "aqua:segmentio/golines", platforms = [
        "linux",
        "macos"
    ]},
    {full = "ubi:segmentio/golines", platforms = [
        "linux",
        "macos"
    ]},
    "go:github.com/segmentio/golines"
]
golines.test = ["golines --version", "golines v{{version}}"]
gomigrate.description = "Database migrations. CLI and Golang library"
gomigrate.backends = [
    "aqua:golang-migrate/migrate",
    "asdf:joschi/asdf-gomigrate"
]
gomigrate.test = ["migrate --version 2>&1", "{{version}}"]
gomplate.description = "A flexible commandline tool for template rendering. Supports lots of local and remote datasources"
gomplate.backends = [
    "aqua:hairyhenderson/gomplate",
    "asdf:sneakybeaky/asdf-gomplate"
]
gopass.description = "The slightly more awesome standard unix password manager for teams"
gopass.backends = ["aqua:gopasspw/gopass", "asdf:trallnag/asdf-gopass"]
goreleaser.description = "Deliver Go binaries as fast and easily as possible"
goreleaser.backends = [
    "aqua:goreleaser/goreleaser",
    "ubi:goreleaser/goreleaser",
    "asdf:kforsthoevel/asdf-goreleaser"
]
goss.description = "Quick and Easy server testing/validation"
goss.backends = ["aqua:goss-org/goss", "asdf:raimon49/asdf-goss"]
gotestsum.description = "'go test' runner with output optimized for humans, JUnit XML for CI integration, and a summary of the test results"
gotestsum.backends = [
    "aqua:gotestyourself/gotestsum",
    "asdf:pmalek/mise-gotestsum"
]
graalvm.backends = ["asdf:mise-plugins/mise-graalvm"]
gradle.backends = ["aqua:gradle/gradle", "vfox:mise-plugins/vfox-gradle"]
gradle.depends = ["java"]
gradle.test = ["gradle -V", "Gradle"]
gradle-profiler.backends = ["asdf:mise-plugins/mise-gradle-profiler"]
grails.backends = ["asdf:mise-plugins/mise-grails"]
grain.backends = [
    "ubi:grain-lang/grain[tag_regex=^grain-]",
    "asdf:mise-plugins/mise-grain"
]
# grain.test = ["grain --version", "{{version}}"] # TODO: use aqua to canonicalize version
granted.backends = ["aqua:common-fate/granted", "asdf:dex4er/asdf-granted"]
graphite.backends = ["npm:@withgraphite/graphite-cli"]
graphite.test = ["gt --version", "{{version}}"]
grex.description = "A command-line tool and library for generating regular expressions from user-provided test cases"
grex.backends = ["aqua:pemistahl/grex", "asdf:ouest/asdf-grex"]
grex.test = ["grex --version", "grex {{version}}"]
gron.description = "Make JSON greppable"
gron.backends = ["aqua:tomnomnom/gron", "ubi:tomnomnom/gron"]
gron.test = ["gron --version", "gron version dev"]
groovy.backends = [
    "asdf:mise-plugins/mise-groovy",
    "vfox:mise-plugins/vfox-groovy"
]
grpc-health-probe.description = "A command-line tool to perform health-checks for gRPC applications in Kubernetes and elsewhere"
grpc-health-probe.backends = [
    "aqua:grpc-ecosystem/grpc-health-probe",
    "asdf:zufardhiyaulhaq/asdf-grpc-health-probe"
]
grpc-health-probe.os = ["linux", "macos"]
grpc-health-probe.test = ["grpc_health_probe --version", "{{version}}"]
grpcurl.description = "Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers"
grpcurl.backends = [
    "aqua:fullstorydev/grpcurl",
    "asdf:asdf-community/asdf-grpcurl"
]
grype.description = "A vulnerability scanner for container images and filesystems"
grype.backends = [
    "aqua:anchore/grype",
    "ubi:anchore/grype",
    "asdf:poikilotherm/asdf-grype"
]
grype.test = ["grype --version", "{{version}}"]
guile.backends = ["asdf:mise-plugins/mise-guile"]
gum.description = "A tool for glamorous shell scripts"
gum.backends = ["aqua:charmbracelet/gum", "asdf:lwiechec/asdf-gum"]
gup.description = "gup - Update binaries installed by \"go install\" with goroutines"
gup.backends = ["aqua:nao1215/gup"]
gup.test = ["gup version", "gup version v{{version}}"]
gwvault.description = "ansible-vault CLI reimplemented in go"
gwvault.backends = [
    "aqua:GoodwayGroup/gwvault",
    "asdf:GoodwayGroup/asdf-gwvault"
]
hadolint.description = "Dockerfile linter, validate inline bash, written in Haskell"
hadolint.backends = [
    "aqua:hadolint/hadolint",
    "ubi:hadolint/hadolint",
    "asdf:devlincashman/asdf-hadolint"
]
hadolint.test = ["hadolint --version", "Haskell Dockerfile Linter {{version}}"]
hamler.backends = ["asdf:mise-plugins/mise-hamler"]
harper-cli.backends = ["aqua:Automattic/harper/harper-cli"]
# harper-cli intentionally prints different version. See https://github.com/Automattic/harper/issues/557#issuecomment-2635037944
# harper-cli.test = ["harper-cli --version", "harper-cli {{version}}"]
harper-ls.backends = ["aqua:Automattic/harper/harper-ls"]
harper-ls.test = ["harper-ls --version", "harper-ls {{version}}"]
has.description = "checks presence of various command line tools and their versions on the path"
has.backends = ["aqua:kdabir/has", "asdf:sylvainmetayer/asdf-has"]
has.os = ["linux", "macos"]
# has.test = ["has --version", "v{{version}}"]
haskell.backends = ["asdf:mise-plugins/mise-haskell"]
hasura-cli.description = "Hasura GraphQL Engine CLI"
hasura-cli.backends = [
    "aqua:hasura/graphql-engine",
    "asdf:gurukulkarni/asdf-hasura"
]
hatch.description = "Modern, extensible Python project management."
hatch.backends = ["pipx:hatch"]
hatch.test = ["hatch --version", "{{version}}"]
haxe.backends = ["ubi:HaxeFoundation/haxe", "asdf:mise-plugins/mise-haxe"]
haxe.test = ["haxe --version", "{{version}}"]
hcl2json.description = "Convert hcl2 to json"
hcl2json.backends = ["aqua:tmccombs/hcl2json", "asdf:dex4er/asdf-hcl2json"]
hcloud.description = "A command-line interface for Hetzner Cloud"
hcloud.backends = ["aqua:hetznercloud/cli", "asdf:chessmango/asdf-hcloud"]
helix.description = "A post-modern modal text editor"
helix.backends = [
    "aqua:helix-editor/helix",
    "ubi:helix-editor/helix[extract_all=true]"
]
helix.test = ["hx --version", "helix {{version}}"]
helm.description = "The Kubernetes Package Manager"
helm.backends = ["aqua:helm/helm", "asdf:Antiarchitect/asdf-helm"]
helm-cr.description = "Hosting Helm Charts via GitHub Pages and Releases"
helm-cr.backends = [
    "aqua:helm/chart-releaser",
    "asdf:Antiarchitect/asdf-helm-cr"
]
helm-ct.description = "CLI tool for linting and testing Helm charts"
helm-ct.backends = ["aqua:helm/chart-testing", "asdf:tablexi/asdf-helm-ct"]
helm-diff.backends = [
    "ubi:databus23/helm-diff[exe=diff,rename_exe=helm-diff]",
    "asdf:mise-plugins/mise-helm-diff"
]
helm-diff.test = ["helm-diff version", "{{version}}"]
helm-docs.description = "A tool for automatically generating markdown documentation for helm charts"
helm-docs.backends = [
    "aqua:norwoodj/helm-docs",
    "asdf:sudermanjr/asdf-helm-docs"
]
helmfile.description = "Declaratively deploy your Kubernetes manifests, Kustomize configs, and Charts as Helm releases. Generate all-in-one manifests for use with ArgoCD"
helmfile.backends = [
    "aqua:helmfile/helmfile",
    "ubi:helmfile/helmfile",
    "asdf:feniix/asdf-helmfile"
]
helmfile.test = ["helmfile --version", "helmfile version {{version}}"]
helmsman.backends = ["ubi:Praqma/helmsman", "asdf:luisdavim/asdf-helmsman"]
helmwave.description = "New  wave for @helm"
helmwave.backends = ["aqua:helmwave/helmwave", "ubi:helmwave/helmwave"]
helmwave.test = ["helmwave version", "{{version}}"]
heroku.aliases = ["heroku-cli"]
heroku.backends = ["asdf:mise-plugins/mise-heroku-cli"]
hexyl.description = "A command-line hex viewer"
hexyl.backends = ["aqua:sharkdp/hexyl", "ubi:sharkdp/hexyl"]
hexyl.test = ["hexyl --version", "hexyl {{version}}"]
hey.backends = ["asdf:mise-plugins/mise-hey"]
hishtory.backends = [
    "ubi:ddworken/hishtory",
    "asdf:asdf-community/asdf-hishtory"
]
hivemind.backends = ["ubi:DarthSim/hivemind", "go:github.com/DarthSim/hivemind"]
hk.description = "git hook and pre-commit lint manager"
hk.backends = ["aqua:jdx/hk", "ubi:jdx/hk"]
hk.test = ["hk --version", "hk {{version}}"]
hledger.backends = ["ubi:simonmichael/hledger", "asdf:airtonix/asdf-hledger"]
hledger-flow.backends = [
    "ubi:apauley/hledger-flow",
    "asdf:airtonix/asdf-hledger-flow"
]
hls.backends = ["asdf:mise-plugins/mise-ghcup"]
# hls.test = ["hls --version", "haskell-language-server version {{version}}"]
hostctl.description = "Your dev tool to manage /etc/hosts like a pro"
hostctl.backends = ["aqua:guumaster/hostctl", "asdf:svenluijten/asdf-hostctl"]
htmlq.description = "Like jq, but for HTML"
htmlq.backends = ["aqua:mgdm/htmlq", "ubi:mgdm/htmlq"]
htmlq.test = ["htmlq --version", "htmlq {{version}}"]
httpie-go.description = "httpie-like HTTP client written in Go"
httpie-go.backends = ["aqua:nojima/httpie-go", "asdf:abatilo/asdf-httpie-go"]
httpie-go.os = ["linux", "macos"]
httpie-go.test = ["ht --version 2>&1", "httpie-go {{version}}"]
hub.description = "A command-line tool that makes git easier to use with GitHub"
hub.backends = ["aqua:mislav/hub", "asdf:mise-plugins/asdf-hub"]
hugo.description = "The worldâ€™s fastest framework for building websites"
hugo.backends = [
    "aqua:gohugoio/hugo",
    "ubi:gohugoio/hugo",
    "asdf:NeoHsu/asdf-hugo",
    "asdf:nklmilojevic/asdf-hugo"
]
hugo-extended.description = "The worldâ€™s fastest framework for building websites"
hugo-extended.backends = ["aqua:gohugoio/hugo/hugo-extended"]
hurl.description = "Hurl, run and test HTTP requests with plain text"
hurl.backends = ["aqua:Orange-OpenSource/hurl", "asdf:raimon49/asdf-hurl"]
hwatch.description = "A modern alternative to the watch command, records the differences in execution results and can check this differences at after"
hwatch.backends = [
    "aqua:blacknon/hwatch",
    "ubi:blacknon/hwatch",
    "asdf:chessmango/asdf-hwatch"
]
hwatch.test = ["hwatch --version", "hwatch {{version}}"]
hygen.backends = ["ubi:jondot/hygen", "asdf:brentjanderson/asdf-hygen"]
hyperfine.description = "A command-line benchmarking tool"
hyperfine.backends = [
    "aqua:sharkdp/hyperfine",
    "ubi:sharkdp/hyperfine",
    "asdf:volf52/asdf-hyperfine"
]
iam-policy-json-to-terraform.description = "Small tool to convert an IAM Policy in JSON format into a Terraform aws_iam_policy_document"
iam-policy-json-to-terraform.backends = [
    "aqua:flosell/iam-policy-json-to-terraform",
    "asdf:carlduevel/asdf-iam-policy-json-to-terraform"
]
iam-policy-json-to-terraform.test = [
    "iam-policy-json-to-terraform --version",
    "{{version}}"
]
iamlive.description = "Generate an IAM policy from AWS calls using client-side monitoring (CSM) or embedded proxy"
iamlive.backends = ["aqua:iann0036/iamlive", "asdf:chessmango/asdf-iamlive"]
ibmcloud.backends = ["asdf:mise-plugins/mise-ibmcloud"]
idris.backends = ["asdf:mise-plugins/mise-idris"]
idris2.backends = ["asdf:mise-plugins/mise-idris2"]
imagemagick.backends = ["asdf:mise-plugins/mise-imagemagick"]
imgpkg.description = "Store application configuration files in Docker/OCI registries"
imgpkg.backends = ["aqua:carvel-dev/imgpkg", "asdf:vmware-tanzu/asdf-carvel"]
infracost.description = "Cloud cost estimates for Terraform in pull requests. Love your cloud bill"
infracost.backends = ["aqua:infracost/infracost", "asdf:dex4er/asdf-infracost"]
inlets.description = "Create inlets servers on the top cloud platforms"
inlets.backends = ["aqua:inlets/inletsctl", "asdf:nlamirault/asdf-inlets"]
io.backends = ["asdf:mise-plugins/mise-io"]
istioctl.backends = [
    "aqua:istio/istio/istioctl",
    "asdf:virtualstaticvoid/asdf-istioctl"
]
istioctl.test = ["istioctl version", "{{version}}"]
janet.backends = ["asdf:mise-plugins/mise-janet"]
java.backends = ["core:java"]
jbang.backends = ["asdf:mise-plugins/jbang-asdf"]
jc.description = "CLI tool and python library that converts the output of popular command-line tools, file-types, and common strings to JSON, YAML, or Dictionaries. This allows piping of output to tools like jq and simplifying automation scripts"
jc.backends = ["aqua:kellyjonbrazil/jc", "ubi:kellyjonbrazil/jc", "pipx:jc"]
jc.test = ["jc --version", "jc version:  {{version}}"]
jd.description = "JSON diff and patch"
jd.backends = [
    "aqua:josephburnett/jd",
    "ubi:josephburnett/jd",
    "go:github.com/josephburnett/jd"
]
jd.test = ["jd --version", "jd version {{version}}"]
jfrog-cli.backends = ["asdf:mise-plugins/mise-jfrog-cli"]
jib.backends = ["asdf:mise-plugins/mise-jib"]
jib.test = ["jib --version", "{{version}}"]
jiq.description = "jid on jq - interactive JSON query tool using jq expressions"
jiq.backends = ["aqua:fiatjaf/jiq", "asdf:chessmango/asdf-jiq"]
jj.aliases = ["jujutsu"]
jj.description = "A Git-compatible VCS that is both simple and powerful"
jj.backends = ["aqua:jj-vcs/jj", "ubi:jj-vcs/jj"]
jjui.description = "Jujutsu UI (jjui) is a Text User Interface (TUI) designed for interacting with the Jujutsu version control system"
jjui.backends = ["aqua:idursun/jjui", "ubi:idursun/jjui"]
jjui.test = ["jjui --version", "{{version}}"]
jjui.aliases = ["jujutsu-ui"]
jless.description = "jless is a command-line JSON viewer designed for reading, exploring, and searching through JSON data"
jless.backends = ["aqua:PaulJuliusMartinez/jless", "asdf:jc00ke/asdf-jless"]
jmespath.description = "Command line interface to JMESPath - http://jmespath.org"
jmespath.backends = ["aqua:jmespath/jp", "asdf:skyzyx/asdf-jmespath"]
jmespath.test = ["jp --version", "jp version {{version}}"]
jmeter.backends = ["asdf:mise-plugins/mise-jmeter"]
jnv.description = "interactive JSON filter using jq"
jnv.backends = ["aqua:ynqa/jnv", "asdf:raimon49/asdf-jnv"]
jq.description = "Command-line JSON processor"
jq.backends = ["aqua:jqlang/jq", "ubi:jqlang/jq", "asdf:mise-plugins/asdf-jq"]
jq.test = ["jq --version", "jq-{{version}}"]
jqp.description = "A TUI playground to experiment with jq"
jqp.backends = [
    "aqua:noahgorstein/jqp",
    "asdf:https://gitlab.com/wt0f/asdf-jqp"
]
jreleaser.description = "Release projects quickly and easily with JReleaser"
jreleaser.backends = ["aqua:jreleaser/jreleaser", "asdf:joschi/asdf-jreleaser"]
json5.backends = ["npm:json5"]
json5.test = ["json5 --version", "{{version}}"]
jsonnet-bundler.aliases = ["jb"]
jsonnet-bundler.description = "A jsonnet package manager"
jsonnet-bundler.backends = [
    "aqua:jsonnet-bundler/jsonnet-bundler",
    "asdf:beardix/asdf-jb"
]
jsonnet-bundler.test = ["jb --version 2>&1", "v{{version}}"]
jsonschema.description = "The CLI for working with JSON Schema. Covers formatting, linting, testing, bundling, and more for both local development and CI/CD pipelines"
jsonschema.backends = [
    "aqua:sourcemeta/jsonschema",
    "ubi:sourcemeta/jsonschema"
]
jsonschema.test = ["jsonschema version", "{{version}}"]
julia.backends = ["asdf:mise-plugins/mise-julia"]
just.description = "Just a command runner"
just.backends = [
    "aqua:casey/just",
    "ubi:casey/just",
    "asdf:olofvndrhr/asdf-just"
]
just.test = ["just --version", "just {{version}}"]
jwt.description = "A super fast CLI tool to decode and encode JWTs built in Rust"
jwt.backends = [
    "aqua:mike-engel/jwt-cli",
    "ubi:mike-engel/jwt-cli[exe=jwt]",
    "cargo:jwt-cli"
]
jwt.test = ["jwt --version", "jwt {{version}}"]
jwtui.backends = ["ubi:jwt-rs/jwt-ui[exe=jwtui]", "cargo:jwt-ui"]
jx.description = "Jenkins X provides automated CI+CD for Kubernetes with Preview Environments on Pull Requests using Cloud Native pipelines from Tekton"
jx.backends = ["aqua:jenkins-x/jx", "ubi:jenkins-x/jx", "asdf:vbehar/asdf-jx"]
k0sctl.description = "A bootstrapping and management tool for k0s clusters"
k0sctl.backends = [
    "aqua:k0sproject/k0sctl",
    "ubi:k0sproject/k0sctl",
    "asdf:Its-Alex/asdf-plugin-k0sctl"
]
k0sctl.test = ["k0sctl version", "version: v{{version}}"]
k2tf.description = "Kubernetes YAML to Terraform HCL converter"
k2tf.backends = [
    "aqua:sl1pm4t/k2tf",
    "ubi:sl1pm4t/k2tf",
    "asdf:carlduevel/asdf-k2tf"
]
k2tf.test = ["k2tf --version", "k2tf version: {{version}}"]
k3d.description = "Little helper to run CNCF's k3s in Docker"
k3d.backends = [
    "aqua:k3d-io/k3d",
    "ubi:k3d-io/k3d",
    "asdf:spencergilbert/asdf-k3d"
]
k3d.test = ["k3d --version", "k3d version v{{version}}"]
k3kcli.backends = [
    "ubi:rancher/k3k[tag_regex=v\\d]",
    "asdf:xanmanning/asdf-k3kcli"
]
k3s.backends = ["asdf:mise-plugins/mise-k3s"]
k3sup.description = "bootstrap K3s over SSH in < 60s"
k3sup.backends = ["aqua:alexellis/k3sup", "asdf:cgroschupp/asdf-k3sup"]
k6.description = "A modern load testing tool, using Go and JavaScript"
k6.backends = ["aqua:grafana/k6", "ubi:grafana/k6", "asdf:gr1m0h/asdf-k6"]
k6.test = ["k6 --version", "k6 v{{version}}"]
k9s.description = "Kubernetes CLI To Manage Your Clusters In Style"
k9s.backends = [
    "aqua:derailed/k9s",
    "ubi:derailed/k9s",
    "asdf:looztra/asdf-k9s"
]
kafka.backends = ["asdf:mise-plugins/mise-kafka"]
kafkactl.description = "Command Line Tool for managing Apache Kafka"
kafkactl.backends = [
    "aqua:deviceinsight/kafkactl",
    "asdf:anweber/asdf-kafkactl"
]
kapp.description = "kapp is a simple deployment tool focused on the concept of \"Kubernetes application\" â€” a set of resources with the same label"
kapp.backends = ["aqua:carvel-dev/kapp", "asdf:vmware-tanzu/asdf-carvel"]
kbld.description = "kbld seamlessly incorporates image building and image pushing into your development and deployment workflows"
kbld.backends = ["aqua:carvel-dev/kbld", "asdf:vmware-tanzu/asdf-carvel"]
kcat.backends = ["asdf:mise-plugins/mise-kcat"]
kcctl.backends = ["ubi:kcctl/kcctl", "asdf:joschi/asdf-kcctl"]
kcl.description = "The KCL Command Line Interface (CLI)"
kcl.backends = ["aqua:kcl-lang/cli", "asdf:mise-plugins/mise-kcl"]
kcl.test = ["kcl --version", "kcl version {{version}}"]
kconf.description = "Manage multiple kubeconfigs easily"
kconf.backends = ["aqua:particledecay/kconf", "asdf:particledecay/asdf-kconf"]
ki.description = "Kotlin Language Interactive Shell"
ki.backends = [
    "aqua:Kotlin/kotlin-interactive-shell",
    "ubi:Kotlin/kotlin-interactive-shell[exe=ki]",
    "asdf:comdotlinux/asdf-ki"
]
ki.test = ["ki --version", "{{version}}"]
killport.description = "A command-line tool to easily kill processes running on a specified port"
killport.backends = ["aqua:jkfran/killport", "ubi:jkfran/killport"]
killport.test = ["killport --version", "killport {{version}}"]
kind.description = "Kubernetes IN Docker - local clusters for testing Kubernetes"
kind.backends = [
    "aqua:kubernetes-sigs/kind",
    "ubi:kubernetes-sigs/kind",
    "asdf:johnlayton/asdf-kind"
]
kind.test = ["kind --version", "kind version {{version}}"]
kiota.description = "OpenAPI based HTTP Client code generator"
kiota.backends = ["aqua:microsoft/kiota", "asdf:asdf-community/asdf-kiota"]
kn.description = "Knative developer experience, docs, reference Knative CLI implementation"
kn.backends = ["aqua:knative/client", "asdf:joke/asdf-kn"]
kn.test = ["kn version", "Version:"]
ko.description = "Build and deploy Go applications on Kubernetes"
ko.backends = ["aqua:ko-build/ko", "asdf:zasdaym/asdf-ko"]
ko.test = ["ko version", "{{version}}"]
koka.backends = ["ubi:koka-lang/koka", "asdf:susurri/asdf-koka"]
kompose.description = "Go from Docker Compose to Kubernetes"
kompose.backends = [
    "aqua:kubernetes/kompose",
    "ubi:kubernetes/kompose",
    "asdf:technikhil314/asdf-kompose"
]
kompose.test = ["kompose version", "{{version}}"]
kops.description = "Kubernetes Operations (kops) - Production Grade K8s Installation, Upgrades, and Management"
kops.backends = ["aqua:kubernetes/kops", "asdf:Antiarchitect/asdf-kops"]
kotlin.backends = [
    "asdf:mise-plugins/mise-kotlin",
    "vfox:mise-plugins/vfox-kotlin"
]
kpack.aliases = ["kp"]
kpack.backends = [
    "ubi:vmware-tanzu/kpack-cli[exe=kp]",
    "asdf:asdf-community/asdf-kpack-cli"
]
kpack.test = ["kp version", "{{version}}"]
kpt.description = "Automate Kubernetes Configuration Editing"
kpt.backends = ["aqua:kptdev/kpt", "asdf:nlamirault/asdf-kpt"]
kpt.os = ["linux", "macos"]
krab.description = "Krab is a migration and automation tool for PostgreSQL based on HCL syntax"
krab.backends = ["aqua:ohkrab/krab", "ubi:ohkrab/krab", "asdf:ohkrab/asdf-krab"]
krab.test = ["krab --version 2>&1", "{{version}}"]
krew.description = "Find and install kubectl plugins"
krew.backends = ["aqua:kubernetes-sigs/krew", "asdf:bjw-s/asdf-krew"]
kscript.backends = [
    "ubi:kscripting/kscript[bin_path=bin,extract_all=true]",
    "asdf:edgelevel/asdf-kscript"
]
ksops.description = "KSOPS - A Flexible Kustomize Plugin for SOPS Encrypted Resources"
ksops.backends = [
    "aqua:viaduct-ai/kustomize-sops",
    "ubi:viaduct-ai/kustomize-sops[exe=ksops]",
    "asdf:janpieper/asdf-ksops"
]
ktlint.depends = ["java"]
ktlint.description = "An anti-bikeshedding Kotlin linter with built-in formatter"
ktlint.backends = ["aqua:pinterest/ktlint", "asdf:mise-plugins/mise-ktlint"]
ktlint.test = ["ktlint --version", "ktlint version {{version}}"]
kube-capacity.description = "A simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster"
kube-capacity.backends = [
    "aqua:robscott/kube-capacity",
    "asdf:looztra/asdf-kube-capacity"
]
kube-code-generator.backends = ["asdf:mise-plugins/mise-kube-code-generator"]
kube-controller-tools.backends = [
    "ubi:kubernetes-sigs/controller-tools[exe=controller-gen]",
    "asdf:jimmidyson/asdf-kube-controller-tools"
]
kube-credential-cache.description = "Accelerator cache for kubernetes access"
kube-credential-cache.backends = [
    "aqua:ryodocx/kube-credential-cache",
    "asdf:ryodocx/kube-credential-cache"
]
kube-linter.description = "KubeLinter is a static analysis tool that checks Kubernetes YAML files and Helm charts to ensure the applications represented in them adhere to best practices"
kube-linter.backends = [
    "aqua:stackrox/kube-linter",
    "asdf:devlincashman/asdf-kube-linter"
]
kube-score.description = "Kubernetes object analysis with recommendations for improved reliability and security. kube-score actively prevents downtime and bugs in your Kubernetes YAML and Charts. Static code analysis for Kubernetes"
kube-score.backends = ["aqua:zegl/kube-score", "asdf:bageljp/asdf-kube-score"]
kubebuilder.description = "Kubebuilder - SDK for building Kubernetes APIs using CRDs"
kubebuilder.backends = [
    "aqua:kubernetes-sigs/kubebuilder",
    "asdf:virtualstaticvoid/asdf-kubebuilder"
]
kubecm.description = "Manage your kubeconfig more easily"
kubecm.backends = ["aqua:sunny0826/kubecm", "asdf:samhvw8/asdf-kubecm"]
kubecolor.description = "Colorize your kubectl output"
kubecolor.backends = ["aqua:kubecolor/kubecolor", "asdf:dex4er/asdf-kubecolor"]
kubecolor.depends = ["kubectl"]
# kubecolor.test = ["kubecolor --kubecolor-version", "v{{version}}"] # disable until mise-versions will be updated
kubeconform.description = "A FAST Kubernetes manifests validator, with support for Custom Resources"
kubeconform.backends = [
    "aqua:yannh/kubeconform",
    "asdf:lirlia/asdf-kubeconform"
]
kubectl.backends = [
    "aqua:kubernetes/kubectl",
    "asdf:asdf-community/asdf-kubectl"
]
kubectl-convert.backends = [
    "aqua:kubernetes/kubernetes/kubectl-convert",
    "asdf:iul1an/asdf-kubectl-convert"
]
kubectl-kots.description = "KOTS provides the framework, tools and integrations that enable the delivery and management of 3rd-party Kubernetes applications, a.k.a. Kubernetes Off-The-Shelf (KOTS) Software"
kubectl-kots.backends = [
    "aqua:replicatedhq/kots",
    "asdf:ganta/asdf-kubectl-kots"
]
kubectl-kots.test = ["kots version", "Replicated KOTS {{version}}"]
kubectl-kuttl.aliases = ["kuttl"]
kubectl-kuttl.description = "KUbernetes Test TooL (kuttl)"
kubectl-kuttl.backends = [
    "aqua:kudobuilder/kuttl",
    "asdf:jimmidyson/asdf-kuttl"
]
kubectl-kuttl.os = ["linux", "macos"]
kubectl-kuttl.test = [
    "kubectl-kuttl --version",
    "kubectl-kuttl version {{version}}"
]
kubectl-rolesum.aliases = ['kubectl-bindrole']
kubectl-rolesum.description = "Summarize Kubernetes RBAC roles for the specified subjects"
kubectl-rolesum.backends = [
    "aqua:Ladicle/kubectl-rolesum",
    "asdf:looztra/asdf-kubectl-bindrole"
]
kubectx.description = "Faster way to switch between clusters and namespaces in kubectl"
kubectx.backends = [
    "aqua:ahmetb/kubectx",
    "asdf:https://gitlab.com/wt0f/asdf-kubectx"
]
kubefedctl.description = "kubefedctl controls a Kubernetes Cluster Federation"
kubefedctl.backends = [
    "aqua:kubernetes-retired/kubefed",
    "asdf:kvokka/asdf-kubefedctl"
]
kubefedctl.test = [
    "kubefedctl version",
    "kubefedctl version:"
] # may not have version in output
kubefirst.backends = ["ubi:konstructio/kubefirst", "asdf:Claywd/asdf-kubefirst"]
kubelogin.description = "kubectl plugin for Kubernetes OpenID Connect authentication (kubectl oidc-login)"
kubelogin.backends = ["aqua:int128/kubelogin"]
kubemqctl.description = "Kubemqctl is a command line interface (CLI) for KubeMQ, Kubernetes Message Broker"
kubemqctl.backends = [
    "aqua:kubemq-io/kubemqctl",
    "asdf:johnlayton/asdf-kubemqctl"
]
kubens.description = "Faster way to switch between clusters and namespaces in kubectl"
kubens.backends = ["aqua:ahmetb/kubectx/kubens"]
kubent.description = "Easily check your clusters for use of deprecated APIs"
kubent.backends = [
    "aqua:doitintl/kube-no-trouble",
    "asdf:virtualstaticvoid/asdf-kubent"
]
kubent.test = ["kubent --version 2>&1", "version {{version}}"]
kubeone.description = "Kubermatic KubeOne automate cluster operations on all your cloud, on-prem, edge, and IoT environments"
kubeone.backends = ["aqua:kubermatic/kubeone", "aqua:kubermatic/kubeone"]
kubeone.test = ["kubeone version | jq -r '.kubeone.gitVersion'", "{{version}}"]
kubergrunt.description = "Kubergrunt is a standalone go binary with a collection of commands to fill in the gaps between Terraform, Helm, and Kubectl. https://www.gruntwork.io"
kubergrunt.backends = [
    "aqua:gruntwork-io/kubergrunt",
    "asdf:NeoHsu/asdf-kubergrunt"
]
kubeseal.description = "A Kubernetes controller and tool for one-way encrypted Secrets"
kubeseal.backends = [
    "aqua:bitnami-labs/sealed-secrets",
    "asdf:stefansedich/asdf-kubeseal"
]
kubeseal.test = ["kubeseal --version", "kubeseal version: {{version}}"]
kubesec.description = "Security risk analysis for Kubernetes resources"
kubesec.backends = ["aqua:controlplaneio/kubesec", "asdf:vitalis/asdf-kubesec"]
kubeshark.description = "The API traffic analyzer for Kubernetes providing real-time K8s protocol-level visibility, capturing and monitoring all traffic and payloads going in, out and across containers, pods, nodes and clusters. Inspired by Wireshark, purposely built for Kubernetes"
kubeshark.backends = [
    "aqua:kubeshark/kubeshark",
    "asdf:carnei-ro/asdf-kubeshark"
]
kubespy.description = "Tools for observing Kubernetes resources in real time, powered by Pulumi"
kubespy.backends = ["aqua:pulumi/kubespy", "asdf:jfreeland/asdf-kubespy"]
kubeval.description = "Validate your Kubernetes configuration files, supports multiple Kubernetes versions"
kubeval.backends = [
    "aqua:instrumenta/kubeval",
    "asdf:stefansedich/asdf-kubeval"
]
kubevela.description = "The Modern Application Platform"
kubevela.backends = [
    "aqua:kubevela/kubevela",
    "asdf:gustavclausen/asdf-kubevela"
]
kubevela.test = ["vela version", "CLI Version: {{version}}"]
kubie.description = "A more powerful alternative to kubectx and kubens"
kubie.backends = ["aqua:sbstp/kubie", "asdf:johnhamelink/asdf-kubie"]
kustomize.description = "Customization of kubernetes YAML configurations"
kustomize.backends = [
    "aqua:kubernetes-sigs/kustomize",
    "asdf:Banno/asdf-kustomize"
]
kustomize.test = ["kustomize version", "v{{version}}"]
kwokctl.backends = ["aqua:kubernetes-sigs/kwok/kwokctl"]
kwokctl.test = ["kwokctl --version", "kwok version v{{version}}"]
kwt.description = "Kubernetes Workstation Tools CLI"
kwt.backends = ["aqua:carvel-dev/kwt", "asdf:vmware-tanzu/asdf-carvel"]
kyverno.description = "Cloud Native Policy Management"
kyverno.backends = [
    "aqua:kyverno/kyverno",
    "asdf:https://github.com/hobaen/asdf-kyverno-cli.git"
]
lab.description = "Lab wraps Git or Hub, making it simple to clone, fork, and interact with repositories on GitLab"
lab.backends = ["aqua:zaquestion/lab", "asdf:particledecay/asdf-lab"]
lane.backends = ["ubi:CodeReaper/lane", "asdf:CodeReaper/asdf-lane"]
lazydocker.description = "The lazier way to manage everything docker"
lazydocker.backends = [
    "aqua:jesseduffield/lazydocker",
    "ubi:jesseduffield/lazydocker"
]
lazydocker.test = ["lazydocker --version", "Version: {{version}}"]
lazygit.description = "simple terminal UI for git commands"
lazygit.backends = [
    "aqua:jesseduffield/lazygit",
    "asdf:nklmilojevic/asdf-lazygit"
]
lazyjournal.description = "TUI for journalctl, file system logs, as well Docker and Podman containers for quick viewing and filtering with fuzzy find, regex support (like fzf and grep) and coloring the output, written in Go with the gocui library"
lazyjournal.backends = ["aqua:Lifailon/lazyjournal", "ubi:Lifailon/lazyjournal"]
lazyjournal.test = ["lazyjournal --version", "{{version}}"]
lean.backends = ["asdf:mise-plugins/mise-lean"]
lefthook.description = "Fast and powerful Git hooks manager for any type of projects"
lefthook.backends = [
    "aqua:evilmartians/lefthook",
    "ubi:evilmartians/lefthook",
    "npm:lefthook", # uses prebuilt binaries
    "asdf:jtzero/asdf-lefthook",
    "go:github.com/evilmartians/lefthook"
]
lefthook.test = ["lefthook version", "{{version}}"]
leiningen.backends = ["asdf:mise-plugins/mise-lein"]
levant.description = "An open source templating and deployment tool for HashiCorp Nomad jobs"
levant.backends = ["aqua:hashicorp/levant", "asdf:mise-plugins/mise-hashicorp"]
lfe.backends = ["asdf:mise-plugins/mise-lfe"]
libsql-server.backends = [
    "ubi:tursodatabase/libsql[tag_regex=libsql-server,exe=sqld]",
    "asdf:jonasb/asdf-libsql-server"
]
license-plist.description = "A license list generator of all your dependencies for iOS applications"
license-plist.backends = [
    "aqua:mono0926/LicensePlist",
    "ubi:mono0926/LicensePlist[exe=license-plist]",
    "asdf:MacPaw/asdf-license-plist"
]
license-plist.os = ["macos"]
license-plist.test = ["license-plist --version", "{{version}}"]
lima.description = "Linux virtual machines, with a focus on running containers"
lima.backends = ["aqua:lima-vm/lima", "asdf:CrouchingMuppet/asdf-lima"]
lima.test = ["lima --version", "limactl version {{version}}"]
linkerd.description = "Ultralight, security-first service mesh for Kubernetes. Main repo for Linkerd 2.x"
linkerd.backends = ["aqua:linkerd/linkerd2", "asdf:kforsthoevel/asdf-linkerd"]
liqoctl.backends = ["aqua:liqotech/liqo", "asdf:pdemagny/asdf-liqoctl"]
liquibase.backends = ["asdf:mise-plugins/mise-liquibase"]
litestream.description = "Streaming replication for SQLite"
litestream.backends = [
    "aqua:benbjohnson/litestream",
    "asdf:threkk/asdf-litestream"
]
llvm-objcopy.backends = ["asdf:mise-plugins/mise-llvm"]
llvm-objdump.backends = ["asdf:mise-plugins/mise-llvm"]
lnav.description = "Log file navigator"
lnav.backends = ["aqua:tstack/lnav", "ubi:tstack/lnav"]
lnav.test = ["lnav --version", "lnav {{version}}"]
localstack.backends = ["ubi:localstack/localstack-cli[exe=localstack]"]
localstack.test = ["localstack --version", "LocalStack CLI {{version}}"]
logtalk.backends = ["asdf:mise-plugins/mise-logtalk"]
loki-logcli.backends = [
    "aqua:grafana/loki/logcli",
    "asdf:comdotlinux/asdf-loki-logcli"
]
ls-lint.description = "An extremely fast directory and filename linter - Bring some structure to your project filesystem"
ls-lint.backends = [
    "aqua:loeffel-io/ls-lint",
    "ubi:loeffel-io/ls-lint",
    "npm:@ls-lint/ls-lint", # uses prebuilt binaries
    "asdf:Ameausoone/asdf-ls-lint"
]
ls-lint.test = ["ls-lint --version", "ls-lint v{{version}}"]
lsd.description = "The next gen ls command"
lsd.backends = ["aqua:lsd-rs/lsd", "asdf:mise-plugins/asdf-lsd"]
lua.backends = ["asdf:mise-plugins/mise-lua"]
lua-language-server.description = "A language server that offers Lua language support - programmed in Lua"
lua-language-server.backends = [
    "aqua:LuaLS/lua-language-server",
    "asdf:bellini666/asdf-lua-language-server"
]
luajit.backends = ["asdf:mise-plugins/mise-luaJIT"]
luau.description = "A fast, small, safe, gradually typed embeddable scripting language derived from Lua"
luau.backends = ["aqua:luau-lang/luau"]
luau.test = ["echo 'print(_VERSION)' | luau", "Luau"]
lychee.description = "Fast, async, stream-based link checker written in Rust. Finds broken URLs and mail addresses inside Markdown, HTML, reStructuredText, websites and more"
lychee.backends = [
    "aqua:lycheeverse/lychee",
    "ubi:lycheeverse/lychee",
    "cargo:lychee"
]
lychee.test = ["lychee --version", "lychee {{version}}"]
maestro.backends = [
    "ubi:mobile-dev-inc/maestro",
    "asdf:dotanuki-labs/asdf-maestro"
]
mage.description = "a Make/rake-like dev tool using Go"
mage.backends = ["aqua:magefile/mage", "asdf:mathew-fleisch/asdf-mage"]
make.backends = ["asdf:mise-plugins/mise-make"]
mani.description = "CLI tool to help you manage repositories"
mani.backends = [
    "aqua:alajmo/mani",
    "ubi:alajmo/mani",
    "asdf:anweber/asdf-mani"
]
mani.test = ["mani --version", "Version: {{version}}"]
mark.backends = ["ubi:kovetskiy/mark", "asdf:jfreeland/asdf-mark"]
markdownlint-cli2.backends = [
    "npm:markdownlint-cli2",
    "asdf:paulo-ferraz-oliveira/asdf-markdownlint-cli2"
]
markdownlint-cli2.test = [
    "markdownlint-cli2 --version",
    "markdownlint-cli2 v{{version}}"
]
marksman.description = "Write Markdown with code assist and intelligence in the comfort of your favourite editor"
marksman.backends = ["aqua:artempyanykh/marksman"]
marksman.test = ["marksman --version", ""]
marp-cli.description = "A CLI interface for Marp and Marpit based converters"
marp-cli.backends = ["aqua:marp-team/marp-cli", "asdf:xataz/asdf-marp-cli"]
mask.description = "A CLI task runner defined by a simple markdown file"
mask.backends = ["aqua:jacobdeichert/mask", "asdf:aaaaninja/asdf-mask"]
mask.test = ["mask --version", "mask {{version}}"]
maven.description = "Apache Maven core"
maven.backends = [
    "aqua:apache/maven",
    "asdf:mise-plugins/mise-maven",
    "vfox:mise-plugins/vfox-maven"
]
# maven.test = ["mvn --version", "Apache Maven {{version}}"] failing for some reason
mc.backends = ["asdf:mise-plugins/mise-mc"]
mdbook.description = "Create book from markdown files. Like Gitbook but implemented in Rust"
mdbook.backends = ["aqua:rust-lang/mdBook", "asdf:cipherstash/asdf-mdbook"]
mdbook.test = ["mdbook --version", "mdbook v{{version}}"]
mdbook-linkcheck.backends = [
    "ubi:Michael-F-Bryan/mdbook-linkcheck",
    "asdf:mise-plugins/mise-mdbook-linkcheck"
]
mdbook-linkcheck.test = [
    "mdbook-linkcheck --version",
    "mdbook-linkcheck {{version}}"
]
melange.description = "build APKs from source code"
melange.backends = ["aqua:chainguard-dev/melange", "asdf:omissis/asdf-melange"]
melange.os = ["linux", "macos"]
melange.test = ["melange version", "GitVersion:    v{{version}}"]
melt.backends = ["ubi:charmbracelet/melt", "asdf:chessmango/asdf-melt"]
memcached.backends = ["asdf:mise-plugins/mise-memcached"]
mercury.backends = ["asdf:mise-plugins/mise-mercury"]
meson.backends = ["asdf:mise-plugins/mise-meson"]
micronaut.backends = ["asdf:mise-plugins/mise-micronaut"]
mill.backends = ["asdf:mise-plugins/mise-mill"]
mimirtool.backends = [
    "aqua:grafana/mimir/mimirtool",
    "asdf:asdf-community/asdf-mimirtool"
]
mimirtool.test = ["mimirtool version", "Mimirtool, version {{version}}"]
mimirtool.os = ["linux", "macos"]
minify.description = "Go minifiers for web formats"
minify.backends = ["aqua:tdewolff/minify", "asdf:axilleas/asdf-minify"]
minikube.description = "Run Kubernetes locally"
minikube.backends = ["aqua:kubernetes/minikube", "asdf:alvarobp/asdf-minikube"]
minio.backends = ["asdf:mise-plugins/mise-minio"]
minishift.description = "Run OpenShift 3.x locally"
minishift.backends = ["aqua:minishift/minishift", "asdf:sqtran/asdf-minishift"]
minisign.description = "A dead simple tool to sign files and verify digital signatures"
minisign.backends = ["aqua:jedisct1/minisign"]
mint.backends = ["ubi:mint-lang/mint", "asdf:mint-lang/asdf-mint"]
mirrord.backends = [
    # "aqua:metalbear-co/mirrord", # +x permission not set
    "ubi:metalbear-co/mirrord",
    "asdf:metalbear-co/asdf-mirrord"
]
mirrord.test = ["mirrord --version", "mirrord {{version}}"]
mitmproxy.backends = ["asdf:mise-plugins/mise-mitmproxy"]
mkcert.description = "A simple zero-config tool to make locally trusted development certificates with any names you'd like"
mkcert.backends = [
    "aqua:FiloSottile/mkcert",
    "ubi:FiloSottile/mkcert",
    "asdf:salasrod/asdf-mkcert"
]
mkcert.test = ["mkcert --version", "v{{version}}"]
mlton.backends = ["asdf:mise-plugins/mise-mlton"]
mockery.description = "A mock code autogenerator for Go"
mockery.backends = ["aqua:vektra/mockery", "asdf:cabify/asdf-mockery"]
mockolo.backends = ["ubi:uber/mockolo", "asdf:mise-plugins/mise-mockolo"]
# mockolo.test = ["mockolo --help", "Show help information"]
mold.description = "Mold: A Modern Linker"
mold.backends = ["aqua:rui314/mold", "ubi:rui314/mold"]
mold.test = ["mold --version", "mold {{version}}"]
monarch.backends = ["asdf:mise-plugins/mise-monarch"]
mongodb.backends = ["asdf:mise-plugins/mise-mongodb"]
mongosh.backends = ["ubi:mongodb-js/mongosh", "asdf:itspngu/asdf-mongosh"]
mprocs.description = "Run multiple commands in parallel"
mprocs.backends = ["aqua:pvolok/mprocs", "ubi:pvolok/mprocs"]
mprocs.test = ["mprocs --version", "mprocs {{version}}"]
mssqldef.backends = ["aqua:sqldef/sqldef/mssqldef"]
mutanus.backends = ["asdf:mise-plugins/mise-mutanus"]
mvnd.description = "Apache Maven Daemon"
mvnd.backends = ["aqua:apache/maven-mvnd", "asdf:joschi/asdf-mvnd"]
mysql.backends = ["asdf:mise-plugins/mise-mysql"]
mysqldef.backends = ["aqua:sqldef/sqldef/mysqldef"]
nancy.description = "A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index"
nancy.backends = [
    "aqua:sonatype-nexus-community/nancy",
    "asdf:iilyak/asdf-nancy"
]
nano.backends = ["asdf:mise-plugins/mise-nano"]
nasm.backends = ["asdf:mise-plugins/mise-nasm"]
navi.description = "An interactive cheatsheet tool for the command-line"
navi.backends = ["aqua:denisidoro/navi", "ubi:denisidoro/navi"]
navi.test = ["navi --version", "navi {{version}}"]
neko.backends = ["ubi:HaxeFoundation/neko", "asdf:asdf-community/asdf-neko"]
neonctl.description = "Neon CLI tool. The Neon CLI is a command-line interface that lets you manage Neon Serverless Postgres directly from the terminal"
neonctl.backends = ["aqua:neondatabase/neonctl", "ubi:neondatabase/neonctl"]
neonctl.test = ["neonctl --version", "{{version}}"]
neovim.description = "Vim-fork focused on extensibility and usability"
neovim.backends = ["aqua:neovim/neovim", "asdf:richin13/asdf-neovim"]
nerdctl.description = "contaiNERD CTL - Docker-compatible CLI for containerd, with support for Compose, Rootless, eStargz, OCIcrypt, IPFS, "
nerdctl.backends = ["aqua:containerd/nerdctl", "asdf:dmpe/asdf-nerdctl"]
nerdctl.test = ["nerdctl --version", "nerdctl version {{version}}"]
newrelic.aliases = ["newrelic-cli"]
newrelic.description = "The New Relic Command Line Interface"
newrelic.backends = [
    "aqua:newrelic/newrelic-cli",
    "ubi:newrelic/newrelic-cli[exe=newrelic]",
    "asdf:NeoHsu/asdf-newrelic-cli"
]
newrelic.test = ["newrelic --version", "newrelic version {{version}}"]
nfpm.description = "nFPM is Not FPM - a simple deb, rpm and apk packager written in Go"
nfpm.backends = [
    "aqua:goreleaser/nfpm",
    "ubi:goreleaser/nfpm",
    "asdf:ORCID/asdf-nfpm"
]
nfpm.test = ["nfpm --version", "{{version}}"]
ni.backends = ["npm:@antfu/ni"]
ni.test = ["ni --version", "@antfu/ni  \u001b[36mv{{version}}\u001b[39m"]
nim.backends = ["asdf:mise-plugins/mise-nim"]
ninja.description = "a small build system with a focus on speed"
ninja.backends = ["aqua:ninja-build/ninja", "asdf:asdf-community/asdf-ninja"]
node.backends = ["core:node"]
nomad.description = "Nomad is an easy-to-use, flexible, and performant workload orchestrator that can deploy a mix of microservice, batch, containerized, and non-containerized applications. Nomad is easy to operate and scale and has native Consul and Vault integrations"
nomad.backends = ["aqua:hashicorp/nomad", "asdf:mise-plugins/mise-hashicorp"]
nomad-pack.backends = ["asdf:mise-plugins/mise-hashicorp"]
notation.description = "A CLI tool to sign and verify artifacts"
notation.backends = ["aqua:notaryproject/notation", "asdf:bodgit/asdf-notation"]
nova.description = "Find outdated or deprecated Helm charts running in your cluster"
nova.backends = ["aqua:FairwindsOps/nova", "asdf:elementalvoid/asdf-nova"]
nsc.backends = ["ubi:nats-io/nsc", "asdf:dex4er/asdf-nsc"]
numbat.description = "A statically typed programming language for scientific computations with first class support for physical dimensions and units"
numbat.backends = ["aqua:sharkdp/numbat", "ubi:sharkdp/numbat"]
numbat.test = ["numbat --version", "numbat {{version}}"]
oapi-codegen.backends = [
    "go:github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen",
    "asdf:dylanrayboss/asdf-oapi-codegen"
]
oauth2c.description = "User-friendly OAuth2 CLI"
oauth2c.backends = ["aqua:cloudentity/oauth2c", "ubi:cloudentity/oauth2c"]
oauth2c.test = ["oauth2c version 2>&1", "oauth2c version {{version}}"]
oc.backends = ["asdf:mise-plugins/mise-oc"]
ocaml.backends = ["asdf:mise-plugins/mise-ocaml"]
oci.backends = ["asdf:mise-plugins/mise-oci"]
octosql.backends = ["ubi:cube2222/octosql"]
octosql.test = ["octosql --version", "octosql version {{version}}"]
odin.backends = ["ubi:odin-lang/Odin[exe=odin]", "asdf:jtakakura/asdf-odin"]
odo.description = "A fast, and iterative CLI tool for container-based application development"
odo.backends = ["aqua:redhat-developer/odo", "asdf:rm3l/asdf-odo"]
okta-aws.aliases = ["okta-aws-cli"]
okta-aws.description = "A CLI for having Okta as the IdP for AWS CLI operations"
okta-aws.backends = [
    "aqua:okta/okta-aws-cli",
    "asdf:bennythejudge/asdf-plugin-okta-aws-cli"
]
okteto.description = "Develop your applications directly in your Kubernetes Cluster"
okteto.backends = ["aqua:okteto/okteto", "asdf:BradenM/asdf-okteto"]
ollama.description = "Get up and running with Llama 3.1, Mistral, Gemma 2, and other large language models"
ollama.backends = ["aqua:ollama/ollama", "asdf:virtualstaticvoid/asdf-ollama"]
om.description = "General command line utility for working with VMware Tanzu Operations Manager"
om.backends = ["aqua:pivotal-cf/om", "asdf:mise-plugins/tanzu-plug-in-for-asdf"]
om.test = ["om version", "{{version}}"]
onyx.backends = ["ubi:onyx-lang/onyx", "asdf:jtakakura/asdf-onyx"]
opa.description = "Open Policy Agent (OPA) is an open source, general-purpose policy engine"
opa.backends = ["aqua:open-policy-agent/opa", "asdf:tochukwuvictor/asdf-opa"]
opam.backends = ["ubi:ocaml/opam", "asdf:asdf-community/asdf-opam"]
openbao.backends = ["ubi:openbao/openbao[exe=bao]"]
opencode.description = "AI coding agent, built for the terminal"
opencode.backends = ["aqua:sst/opencode", "ubi:sst/opencode"]
opencode.test = ["opencode --version", "{{version}}"]
openfaas-cli.description = "Official CLI for OpenFaaS"
openfaas-cli.backends = ["aqua:openfaas/faas-cli", "asdf:zekker6/asdf-faas-cli"]
openresty.backends = ["asdf:mise-plugins/mise-openresty"]
opensearch.backends = ["asdf:mise-plugins/mise-opensearch"]
opensearch-cli.backends = [
    "ubi:opensearch-project/opensearch-cli",
    "asdf:mise-plugins/mise-opensearch-cli"
]
opensearch-cli.test = [
    "opensearch-cli --version",
    "opensearch-cli version {{version}}"
]
openshift-install.backends = ["asdf:mise-plugins/mise-openshift-install"]
opentofu.description = "OpenTofu lets you declaratively manage your cloud infrastructure"
opentofu.backends = [
    "aqua:opentofu/opentofu",
    "ubi:opentofu/opentofu[exe=tofu]",
    "asdf:virtualroot/asdf-opentofu"
]
opentofu.test = ["tofu --version", "OpenTofu v{{version}}"]
operator-sdk.description = "SDK for building Kubernetes applications. Provides high level APIs, useful abstractions, and project scaffolding"
operator-sdk.backends = [
    "aqua:operator-framework/operator-sdk",
    "asdf:Medium/asdf-operator-sdk"
]
opsgenie-lamp.backends = [
    "ubi:opsgenie/opsgenie-lamp",
    "asdf:mise-plugins/mise-opsgenie-lamp"
]
opsgenie-lamp.test = [
    "opsgenie-lamp --version",
    "lamp version "
] # 3.1.4 reports 3.2.0
oras.description = "ORAS CLI"
oras.backends = ["aqua:oras-project/oras", "asdf:bodgit/asdf-oras"]
osqueryi.backends = ["asdf:mise-plugins/mise-osqueryi"]
osv-scanner.description = "Vulnerability scanner written in Go which uses the data provided by https://osv.dev"
osv-scanner.backends = ["aqua:google/osv-scanner"]
osv-scanner.test = ["osv-scanner --version", "osv-scanner version: {{version}}"]
overmind.backends = [
    "ubi:DarthSim/overmind",
    "go:github.com/DarthSim/overmind/v2"
]
oxipng.backends = ["aqua:shssoichiro/oxipng"]
oxker.description = "A simple tui to view & control docker containers"
oxker.backends = [
    "aqua:mrjackwills/oxker",
    "ubi:mrjackwills/oxker",
    "cargo:oxker"
]
oxker.test = ["oxker --version", "oxker {{version}}"]
oxlint.description = "This is the linter for oxc."
oxlint.backends = [
    "aqua:oxc-project/oxc/oxlint",
    "ubi:oxc-project/oxc",
    "npm:oxlint"
]
oxlint.test = ["oxlint --version", "Version: {{version}}"]
pachctl.description = "Data-Centric Pipelines and Data Versioning"
pachctl.backends = ["aqua:pachyderm/pachyderm", "asdf:abatilo/asdf-pachctl"]
# pachctl.test = ["pachctl version", "{{version}}"] # test fails on ci but seems to work locally
packer.description = "Packer is a tool for creating identical machine images for multiple platforms from a single source configuration"
packer.backends = ["aqua:hashicorp/packer", "asdf:mise-plugins/mise-hashicorp"]
packer.idiomatic_files = [".packer-version"]
packer.test = ["packer --version", "Packer v{{version}}"]
pandoc.backends = ["ubi:jgm/pandoc", "asdf:Fbrisset/asdf-pandoc"]
patat.backends = ["ubi:jaspervdj/patat", "asdf:airtonix/asdf-patat"]
pdm.backends = ["pipx:pdm", "asdf:1oglop1/asdf-pdm"]
pdm.test = ["pdm --version", "PDM, version {{version}}"]
peco.description = "Simplistic interactive filtering tool"
peco.backends = ["aqua:peco/peco", "asdf:asdf-community/asdf-peco"]
periphery.description = "A tool to identify unused code in Swift projects"
periphery.backends = [
    "aqua:peripheryapp/periphery",
    "asdf:mise-plugins/mise-periphery"
]
perl.description = "self-contained, portable perl binaries"
perl.backends = ["aqua:skaji/relocatable-perl", "asdf:ouest/asdf-perl"]
php.backends = ["asdf:mise-plugins/asdf-php", "vfox:mise-plugins/vfox-php"]
pinact.description = "pinact is a CLI to edit GitHub Workflow and Composite action files and pin versions of Actions and Reusable Workflows. pinact can also update their versions and verify version annotations"
pinact.backends = ["aqua:suzuki-shunsuke/pinact", "ubi:suzuki-shunsuke/pinact"]
pinact.test = ["pinact version", "{{version}}"]
pint.description = "Prometheus rule linter/validator"
pint.backends = ["aqua:cloudflare/pint", "asdf:sam-burrell/asdf-pint"]
pipectl.backends = ["aqua:pipe-cd/pipecd/pipectl", "asdf:pipe-cd/asdf-pipectl"]
pipectl.test = ["pipectl version", "Version: v{{version}}"]
pipectl.os = ["linux", "macos"]
pipelight.backends = ["asdf:mise-plugins/mise-pipelight"]
pipenv.backends = ["asdf:mise-plugins/mise-pipenv"]
pipenv.depends = ["python"]
pipx.backends = ["aqua:pypa/pipx", "asdf:mise-plugins/mise-pipx"]
pipx.depends = ["python"]
pipx.test = ["pipx --version", "{{version}}"]
pitchfork.description = "Daemons with DX"
pitchfork.backends = ["aqua:jdx/pitchfork", "ubi:jdx/pitchfork"]
pitchfork.test = ["pitchfork --version", "pitchfork {{version}}"]
pivnet.description = "CLI to interact with Tanzu Network API V2 interface"
pivnet.backends = [
    "aqua:pivotal-cf/pivnet-cli",
    "asdf:mise-plugins/tanzu-plug-in-for-asdf"
]
pivnet.test = ["pivnet version", ""] # version returns "dev" on windows
pixi.backends = ["ubi:prefix-dev/pixi"]
pixi.test = ["pixi -V", "pixi {{version}}"]
pkl.description = "A configuration as code language with rich validation and tooling"
pkl.backends = ["aqua:apple/pkl", "ubi:apple/pkl", "asdf:mise-plugins/asdf-pkl"]
pkl.test = ["pkl --version", "Pkl {{version}}"]
please.description = "High-performance extensible build system for reproducible multi-language builds"
please.backends = [
    "aqua:thought-machine/please",
    "asdf:asdf-community/asdf-please"
]
pluto.description = "A cli tool to help discover deprecated apiVersions in Kubernetes"
pluto.backends = [
    "aqua:FairwindsOps/pluto",
    "ubi:FairwindsOps/pluto",
    "asdf:FairwindsOps/asdf-pluto"
]
pluto.test = ["pluto version", "Version:{{version}}"]
pnpm.description = "Fast, disk space efficient package manager"
pnpm.backends = [
    "aqua:pnpm/pnpm",
    "ubi:pnpm/pnpm",
    "npm:pnpm", # uses prebuilt binaries
    "asdf:jonathanmorley/asdf-pnpm"
]
pnpm.test = ["pnpm --version", "{{version}}"]
podman.backends = [
    "ubi:containers/podman[matching=podman-remote]",
    "asdf:tvon/asdf-podman"
]
poetry.backends = ["asdf:mise-plugins/mise-poetry"]
poetry.depends = ["python"]
polaris.description = "Validation of best practices in your Kubernetes clusters"
polaris.backends = [
    "aqua:FairwindsOps/polaris",
    "asdf:particledecay/asdf-polaris"
]
popeye.description = "A Kubernetes cluster resource sanitizer"
popeye.backends = ["aqua:derailed/popeye", "asdf:nlamirault/asdf-popeye"]
postgis.backends = ["asdf:mise-plugins/mise-postgis"]
postgres.backends = ["asdf:mise-plugins/mise-postgres"]
powerline-go.description = "A beautiful and useful low-latency prompt for your shell, written in go"
powerline-go.backends = [
    "aqua:justjanne/powerline-go",
    "ubi:justjanne/powerline-go",
    "asdf:dex4er/asdf-powerline-go"
]
powerpipe.description = "Powerpipe: Dashboards for DevOps. Visualize cloud configurations. Assess security posture against a massive library of benchmarks. Build custom dashboards with code"
powerpipe.backends = ["aqua:turbot/powerpipe", "asdf:jc00ke/asdf-powerpipe"]
powershell-core.aliases = ["powershell"]
powershell-core.description = "PowerShell for every system"
powershell-core.backends = [
    "aqua:PowerShell/PowerShell",
    "asdf:daveneeley/asdf-powershell-core"
]
pre-commit.description = "A framework for managing and maintaining multi-language pre-commit hooks"
pre-commit.backends = [
    "aqua:pre-commit/pre-commit",
    "ubi:pre-commit/pre-commit",
    "asdf:jonathanmorley/asdf-pre-commit",
    "pipx:pre-commit"
]
pre-commit.test = ["pre-commit --version", "pre-commit {{version}}"]
prettier.backends = ["npm:prettier"]
prettier.test = ["prettier --version", "{{version}}"]
process-compose.description = "Process Compose is a simple and flexible scheduler and orchestrator to manage non-containerized applications."
process-compose.backends = ["ubi:F1bonacc1/process-compose"]
process-compose.test = ["process-compose version --short", "{{version}}"]
promtool.description = "The Prometheus monitoring system and time series database"
promtool.backends = [
    "aqua:prometheus/prometheus",
    "asdf:asdf-community/asdf-promtool"
]
promtool.test = ["promtool --version", "promtool, version {{version}}"]
protoc.aliases = ["protobuf"]
protoc.backends = [
    "aqua:protocolbuffers/protobuf/protoc",
    "asdf:paxosglobal/asdf-protoc"
]
protoc-gen-connect-go.backends = [
    "go:connectrpc.com/connect/cmd/protoc-gen-connect-go",
    "asdf:dylanrayboss/asdf-protoc-gen-connect-go"
]
protoc-gen-go.backends = [
    "aqua:protocolbuffers/protobuf-go/protoc-gen-go",
    "asdf:pbr0ck3r/asdf-protoc-gen-go"
]
protoc-gen-go-grpc.backends = [
    "aqua:grpc/grpc-go/protoc-gen-go-grpc",
    "asdf:pbr0ck3r/asdf-protoc-gen-go-grpc"
]
protoc-gen-go-grpc.test = [
    "protoc-gen-go-grpc --version",
    "protoc-gen-go-grpc"
] # TODO: use version_prefix and put version back in
protoc-gen-grpc-web.backends = ["asdf:mise-plugins/mise-protoc-gen-grpc-web"]
protoc-gen-js.backends = [
    "ubi:protocolbuffers/protobuf-javascript[exe=protoc-gen-js]",
    "asdf:pbr0ck3r/asdf-protoc-gen-js"
]
protoc-gen-validate.description = "Protocol Buffer Validation - Being replaced by github.com/bufbuild/protovalidate"
protoc-gen-validate.backends = [
    "aqua:bufbuild/protoc-gen-validate",
    "go:github.com/envoyproxy/protoc-gen-validate"
]
protoc-gen-validate.test = ["which protoc-gen-validate", "protoc-gen-validate"]
protolint.description = "A pluggable linter and fixer to enforce Protocol Buffer style and conventions"
protolint.backends = [
    "aqua:yoheimuta/protolint",
    "asdf:spencergilbert/asdf-protolint"
]
protonge.backends = ["asdf:mise-plugins/mise-protonge"]
psc-package.backends = [
    "ubi:purescript/psc-package",
    "asdf:nsaunders/asdf-psc-package"
]
psqldef.backends = ["aqua:sqldef/sqldef/psqldef"]
pulumi.description = "Pulumi - Infrastructure as Code in any programming language"
pulumi.backends = ["aqua:pulumi/pulumi", "asdf:canha/asdf-pulumi"]
pulumi.test = ["pulumi version", "v{{version}}"]
purerl.backends = ["ubi:purerl/purerl", "asdf:GoNZooo/asdf-purerl"]
purescript.backends = [
    "ubi:purescript/purescript[exe=purs]",
    "asdf:jrrom/asdf-purescript"
]
purty.backends = ["asdf:mise-plugins/mise-purty"]
python.backends = ["core:python"]
qdns.backends = ["ubi:natesales/q", "asdf:moritz-makandra/asdf-plugin-qdns"]
qsv.backends = ["ubi:dathere/qsv", "asdf:vjda/asdf-qsv"]
qsv.test = ["qsv --version", "qsv {{version}}"]
quarkus.backends = ["asdf:mise-plugins/mise-quarkus"]
r.backends = ["asdf:mise-plugins/mise-r"]
rabbitmq.backends = ["asdf:mise-plugins/asdf-rabbitmq"]
racket.backends = ["asdf:mise-plugins/mise-racket"]
railway.backends = ["ubi:railwayapp/cli[exe=railway]"]
railway.test = ["railway --version", "railway {{version}}"]
raku.backends = ["asdf:mise-plugins/mise-raku"]
rancher.description = "Rancher CLI"
rancher.backends = ["aqua:rancher/cli", "asdf:abinet/asdf-rancher"]
rancher.test = ["rancher --version", "rancher version v{{version}}"]
rbac-lookup.description = "Easily find roles and cluster roles attached to any user, service account, or group name in your Kubernetes cluster"
rbac-lookup.backends = [
    "aqua:FairwindsOps/rbac-lookup",
    "asdf:looztra/asdf-rbac-lookup"
]
rclone.description = "\"rsync for cloud storage\" - Google Drive, S3, Dropbox, Backblaze B2, One Drive, Swift, Hubic, Wasabi, Google Cloud Storage, Yandex Files"
rclone.backends = [
    "aqua:rclone/rclone",
    "ubi:rclone/rclone",
    "asdf:johnlayton/asdf-rclone"
]
rclone.test = ["rclone version", "rclone v{{version}}"]
rebar.backends = ["asdf:mise-plugins/mise-rebar"]
rebar.depends = ["erlang"]
reckoner.backends = [
    "ubi:FairwindsOps/reckoner",
    "asdf:FairwindsOps/asdf-reckoner"
]
redis.backends = ["asdf:mise-plugins/mise-redis"]
redis-cli.backends = ["asdf:mise-plugins/mise-redis-cli"]
redo.description = "Redo is the ultimate tool to create reusable functions from your history in an interactive way"
redo.backends = [
    "aqua:barthr/redo",
    "ubi:barthr/redo",
    "asdf:chessmango/asdf-redo"
]
redo.test = ["which redo", "redo"]
reg.description = "Docker registry v2 command line client and repo listing generator with security checks"
reg.backends = ["aqua:genuinetools/reg", "asdf:looztra/asdf-reg"]
regal.description = "Regal is a linter for Rego, with the goal of making your Rego magnificent"
regal.backends = ["aqua:StyraInc/regal", "asdf:mise-plugins/mise-regal"]
regctl.backends = ["aqua:regclient/regclient/regctl", "asdf:ORCID/asdf-regctl"]
regsync.backends = [
    "aqua:regclient/regclient/regsync",
    "asdf:rsrchboy/asdf-regsync"
]
restic.description = "Fast, secure, efficient backup program"
restic.backends = ["aqua:restic/restic", "asdf:xataz/asdf-restic"]
# restic.test = ["restic version", "restic {{version}}"] fails on windows
restish.backends = [
    "ubi:danielgtaylor/restish",
    "go:github.com/danielgtaylor/restish"
]
resvg.description = "An SVG rendering library."
resvg.backends = ["aqua:linebender/resvg"]
resvg.test = ["resvg --version", "{{version}}"]
revive.description = "~6x faster, stricter, configurable, extensible, and beautiful drop-in replacement for golint"
revive.backends = ["aqua:mgechev/revive", "asdf:bjw-s/asdf-revive"]
richgo.description = "Enrich `go test` outputs with text decorations"
richgo.backends = ["aqua:kyoh86/richgo", "asdf:paxosglobal/asdf-richgo"]
ripgrep.aliases = ["rg"]
ripgrep.description = "ripgrep recursively searches directories for a regex pattern while respecting your gitignore"
ripgrep.backends = [
    "aqua:BurntSushi/ripgrep",
    "ubi:BurntSushi/ripgrep[exe=rg]",
    "asdf:https://gitlab.com/wt0f/asdf-ripgrep",
    "cargo:ripgrep"
]
ripgrep.test = ["rg --version", "ripgrep {{version}}"]
ripgrep-all.description = "rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc"
ripgrep-all.backends = [
    "aqua:phiresky/ripgrep-all",
    "ubi:phiresky/ripgrep-all[exe=rga]",
    "cargo:ripgrep_all"
]
ripgrep-all.test = ["rga --version", "ripgrep-all {{version}}"]
ripsecrets.description = "A command-line tool to prevent committing secret keys into your source code"
ripsecrets.backends = [
    "aqua:sirwart/ripsecrets",
    "asdf:https://github.com/boris-smidt-klarrio/asdf-ripsecrets"
]
# ripsecrets.test = ["ripsecrets --version", "ripsecrets {{version}}"] # broke in CI
rke.description = "Rancher Kubernetes Engine (RKE), an extremely simple, lightning fast Kubernetes distribution that runs entirely within containers"
rke.backends = ["aqua:rancher/rke", "asdf:particledecay/asdf-rke"]
rlwrap.backends = ["asdf:mise-plugins/mise-rlwrap"]
ruby.backends = ["core:ruby"]
ruff.description = "An extremely fast Python linter and code formatter, written in Rust"
ruff.backends = [
    "aqua:astral-sh/ruff",
    "ubi:astral-sh/ruff",
    "asdf:simhem/asdf-ruff"
]
rust.backends = ["core:rust", "asdf:code-lever/asdf-rust"]
rust-analyzer.description = "A Rust compiler front-end for IDEs"
rust-analyzer.backends = [
    "aqua:rust-lang/rust-analyzer",
    "asdf:Xyven1/asdf-rust-analyzer"
]
rustic.description = "rustic - fast, encrypted, and deduplicated backups powered by Rust"
rustic.backends = ["aqua:rustic-rs/rustic", "ubi:rustic-rs/rustic"]
rustic.test = ["rustic --version", "rustic v{{version}}"]
rye.description = "a Hassle-Free Python Experience"
rye.backends = ["aqua:astral-sh/rye", "asdf:Azuki-bar/asdf-rye"]
saml2aws.description = "CLI tool which enables you to login and retrieve AWS temporary credentials using a SAML IDP"
saml2aws.backends = [
    "aqua:Versent/saml2aws",
    "asdf:elementalvoid/asdf-saml2aws"
]
sampler.description = "Tool for shell commands execution, visualization and alerting. Configured with a simple YAML file"
sampler.backends = ["aqua:sqshq/sampler", "ubi:sqshq/sampler"]
sampler.test = ["sampler --version 2>&1", "{{version}}"]
sbcl.backends = ["asdf:mise-plugins/mise-sbcl"]
sbt.backends = ["asdf:mise-plugins/mise-sbt"]
sbt.depends = ["java"]
scala.backends = [
    "asdf:mise-plugins/mise-scala",
    "vfox:mise-plugins/vfox-scala"
]
scala-cli.backends = [
    "ubi:VirtusLab/scala-cli",
    "asdf:mise-plugins/mise-scala-cli"
]
scaleway.aliases = ["scaleway-cli"]
scaleway.description = "Command Line Interface for Scaleway"
scaleway.backends = [
    "aqua:scaleway/scaleway-cli",
    "asdf:albarralnunez/asdf-plugin-scaleway-cli"
]
scalingo-cli.description = "Command Line client for Scalingo PaaS"
scalingo-cli.backends = [
    "aqua:Scalingo/cli",
    "asdf:brandon-welsch/asdf-scalingo-cli"
]
scarb.backends = [
    "ubi:software-mansion/scarb",
    "asdf:software-mansion/asdf-scarb"
]
sccache.description = "sccache is ccache with cloud storage"
sccache.backends = [
    "aqua:mozilla/sccache",
    "ubi:mozilla/sccache",
    "asdf:emersonmx/asdf-sccache"
]
sccache.test = ["sccache --version", "sccache {{version}}"]
schemacrawler.backends = ["asdf:mise-plugins/mise-schemacrawler"]
scie-pants.backends = [
    "ubi:pantsbuild/scie-pants",
    "asdf:robzr/asdf-scie-pants"
]
scorecard.description = "OpenSSF Scorecard - Security health metrics for Open Source"
scorecard.backends = ["aqua:ossf/scorecard"]
scorecard.test = ["scorecard version", "v{{version}}"]
sd.description = "Intuitive find & replace CLI (sed alternative)"
sd.backends = ["aqua:chmln/sd", "ubi:chmln/sd", "cargo:sd"]
sd.test = ["sd --version", "sd {{version}}"]
seed7.backends = ["asdf:mise-plugins/mise-seed7"]
semgrep.backends = ["pipx:semgrep", "asdf:mise-plugins/mise-semgrep"]
semgrep.test = ["semgrep --version", "{{version}}"]
semtag.backends = ["asdf:mise-plugins/mise-semtag"]
semver.description = "semver bash implementation"
semver.backends = [
    "aqua:fsaintjacques/semver-tool",
    "asdf:mathew-fleisch/asdf-semver"
]
sentinel.backends = ["asdf:mise-plugins/mise-hashicorp"]
sentry.aliases = ["sentry-cli"]
sentry.description = "A command line utility to work with Sentry"
sentry.backends = ["aqua:getsentry/sentry-cli", "ubi:getsentry/sentry-cli"]
sentry.test = ["sentry-cli --version", "sentry-cli {{version}}"]
serf.backends = ["asdf:mise-plugins/mise-hashicorp"]
serverless.backends = ["asdf:mise-plugins/mise-serverless"]
setup-envtest.backends = ["asdf:mise-plugins/mise-setup-envtest"]
shell2http.description = "Executing shell commands via HTTP server"
shell2http.backends = ["aqua:msoap/shell2http", "asdf:ORCID/asdf-shell2http"]
shellcheck.description = "ShellCheck, a static analysis tool for shell scripts"
shellcheck.backends = [
    "aqua:koalaman/shellcheck",
    "ubi:koalaman/shellcheck",
    "asdf:luizm/asdf-shellcheck"
]
shellcheck.os = ["linux", "macos"]
shellcheck.test = ["shellcheck --version", "version: {{version}}"]
shellspec.description = "A full-featured BDD unit testing framework for bash, ksh, zsh, dash and all POSIX shells"
shellspec.backends = [
    "aqua:shellspec/shellspec",
    "asdf:poikilotherm/asdf-shellspec"
]
shfmt.description = "A shell parser, formatter, and interpreter with bash support; includes shfmt"
shfmt.backends = [
    "aqua:mvdan/sh",
    "ubi:mvdan/sh",
    "asdf:luizm/asdf-shfmt",
    "go:mvdan.cc/sh/v3/cmd/shfmt"
]
shfmt.os = ["linux", "macos"]
shfmt.test = ["shfmt --version", "v{{version}}"]
shorebird.backends = ["asdf:mise-plugins/mise-shorebird"]
signadot.backends = ["ubi:signadot/cli[exe=signadot]"]
signadot.test = ["signadot --version", "signadot version v{{version}}"]
sinker.description = "A tool to sync images from one container registry to another"
sinker.backends = ["aqua:plexsystems/sinker", "asdf:elementalvoid/asdf-sinker"]
skaffold.description = "Easy and Repeatable Kubernetes Development"
skaffold.backends = [
    "aqua:GoogleContainerTools/skaffold",
    "asdf:nklmilojevic/asdf-skaffold"
]
skate.description = "A personal key value store"
skate.backends = ["aqua:charmbracelet/skate", "asdf:chessmango/asdf-skate"]
skeema.description = "Declarative pure-SQL schema management for MySQL and MariaDB (Community Edition)"
skeema.backends = ["aqua:skeema/skeema", "ubi:skeema/skeema"]
skeema.test = [
    "skeema version | awk -F, '{print $1}'",
    "skeema version {{version}}-community"
]
sloth.description = "Easy and simple Prometheus SLO (service level objectives) generator"
sloth.backends = ["aqua:slok/sloth", "asdf:slok/asdf-sloth"]
slsa-verifier.backends = ["ubi:slsa-framework/slsa-verifier"]
slsa-verifier.test = ["slsa-verifier version", "{{version}}"]
smithy.backends = ["asdf:mise-plugins/mise-smithy"]
smlnj.backends = ["asdf:mise-plugins/mise-smlnj"]
snyk.description = "Snyk CLI scans and monitors your projects for security vulnerabilities"
snyk.backends = ["aqua:snyk/cli", "asdf:nirfuchs/asdf-snyk"]
soft-serve.backends = [
    "ubi:charmbracelet/soft-serve[exe=soft]",
    "asdf:chessmango/asdf-soft-serve"
]
solidity.backends = [
    "ubi:ethereum/solidity[exe=solc]",
    "asdf:diegodorado/asdf-solidity"
]
sonobuoy.backends = [
    "ubi:vmware-tanzu/sonobuoy",
    "asdf:Nick-Triller/asdf-sonobuoy"
]
sops.description = "Simple and flexible tool for managing secrets"
sops.backends = [
    "aqua:getsops/sops",
    "ubi:getsops/sops",
    "asdf:mise-plugins/mise-sops"
]
sopstool.description = "SOPS multi-file wrapper"
sopstool.backends = ["aqua:ibotta/sopstool", "asdf:elementalvoid/asdf-sopstool"]
soracom.backends = ["ubi:soracom/soracom-cli", "asdf:gr1m0h/asdf-soracom"]
sourcery.backends = ["asdf:mise-plugins/mise-sourcery"]
spacectl.description = "Spacelift client and CLI"
spacectl.backends = ["aqua:spacelift-io/spacectl", "asdf:bodgit/asdf-spacectl"]
spago.backends = ["ubi:purescript/spago", "asdf:jrrom/asdf-spago"]
spark.description = "Apache Spark - A unified analytics engine for large-scale data processing"
spark.backends = ["aqua:apache/spark", "asdf:mise-plugins/mise-spark"]
spark.depends = ["java"]
spark.test = ["spark-shell --version 2>&1", "version {{version}}"]
specstory.description = "You donâ€™t write prompts. You author intent. Enhance your AI development workflow with SpecStory"
specstory.backends = [
    "aqua:specstoryai/getspecstory",
    "ubi:specstoryai/getspecstory"
]
specstory.os = ["linux", "macos"]
specstory.test = ["specstory --version", "{{version}} (SpecStory)"]
spectral.description = "A flexible JSON/YAML linter for creating automated style guides, with baked in support for OpenAPI (v3.1, v3.0, and v2.0), Arazzo v1.0, as well as AsyncAPI v2.x"
spectral.backends = ["aqua:stoplightio/spectral", "asdf:vbyrd/asdf-spectral"]
spin.description = "Spinnaker CLI"
spin.backends = ["aqua:spinnaker/spin", "asdf:pavloos/asdf-spin"]
spring-boot.backends = ["asdf:mise-plugins/mise-spring-boot"]
spruce.description = "Standalone, daemon-less, unprivileged Dockerfile and OCI compatible container image builder"
spruce.backends = ["aqua:geofffranks/spruce", "asdf:woneill/asdf-spruce"]
sqlite.backends = ["asdf:mise-plugins/mise-sqlite"]
sqlite3def.backends = ["aqua:sqldef/sqldef/sqlite3def"]
sshi.backends = ["aqua:aakso/ssh-inscribe/sshi"]
sshi.test = ["sshi version", "local: {{version}}"]
sshuttle.backends = ["asdf:mise-plugins/mise-sshuttle"]
sst.description = "Build full-stack apps on your own infrastructure"
sst.backends = ["ubi:sst/sst"]
sst.test = ["sst version", "sst {{version}}"]
stack.description = "The Haskell Tool Stack"
stack.backends = [
    "aqua:commercialhaskell/stack",
    "asdf:mise-plugins/mise-ghcup"
]
stack.test = ["stack --version", "Version {{version}}"]
starboard.description = "Kubernetes-native security toolkit"
starboard.backends = [
    "aqua:aquasecurity/starboard",
    "asdf:zufardhiyaulhaq/asdf-starboard"
]
starknet-foundry.backends = ["ubi:foundry-rs/starknet-foundry[exe=snforge]"]
starknet-foundry-sncast.backends = [
    "ubi:foundry-rs/starknet-foundry[exe=sncast]"
]
starship.description = "The minimal, blazing-fast, and infinitely customizable prompt for any shell"
starship.backends = [
    "aqua:starship/starship",
    "ubi:starship/starship",
    "asdf:gr1m0h/asdf-starship"
]
starship.test = ["starship --version", "starship {{version}}"]
staticcheck.backends = [
    "aqua:dominikh/go-tools/staticcheck",
    "asdf:pbr0ck3r/asdf-staticcheck"
]
steampipe.description = "Use SQL to instantly query your cloud services (AWS, Azure, GCP and more). Open source CLI. No DB required"
steampipe.backends = ["aqua:turbot/steampipe", "asdf:carnei-ro/asdf-steampipe"]
steampipe.test = ["steampipe --version", "Steampipe v{{version}}"]
step.description = "A zero trust swiss army knife for working with X509, OAuth, JWT, OATH OTP, etc"
step.backends = ["aqua:smallstep/cli", "asdf:log2/asdf-step"]
stern.description = "âŽˆ Multi pod and container log tailing for Kubernetes -- Friendly fork of https://github.com/wercker/stern"
stern.backends = ["aqua:stern/stern", "asdf:looztra/asdf-stern"]
stripe.aliases = ["stripe-cli"]
stripe.description = "A command-line tool for Stripe"
stripe.backends = ["aqua:stripe/stripe-cli", "asdf:offbyone/asdf-stripe"]
stylua.description = "A Lua code formatter"
stylua.backends = ["aqua:JohnnyMorganz/StyLua", "asdf:jc00ke/asdf-stylua"]
stylua.test = ["stylua --version", "stylua {{version}}"]
sui.backends = ["ubi:MystenLabs/sui", "asdf:placeholder-soft/asdf-sui"]
superfile.description = "Pretty fancy and modern terminal file manager"
superfile.backends = ["aqua:yorukot/superfile"]
superfile.test = ["spf --version", "superfile version v{{version}}"]
sver.description = "Version generator based on source code"
sver.backends = ["aqua:mitoma/sver", "asdf:robzr/asdf-sver"]
svu.description = "semantic version utility"
svu.backends = ["aqua:caarlos0/svu", "asdf:asdf-community/asdf-svu"]
swag.description = "Automatically generate RESTful API documentation with Swagger 2.0 for Go"
swag.backends = ["aqua:swaggo/swag", "asdf:behoof4mind/asdf-swag"]
swift.backends = ["core:swift"]
swift.os = ["linux", "macos"]
swift-package-list.backends = ["asdf:mise-plugins/mise-swift-package-list"]
swiftformat.backends = ["asdf:mise-plugins/mise-swiftformat"]
swiftgen.backends = ["asdf:mise-plugins/mise-swiftgen"]
swiftlint.description = "A tool to enforce Swift style and conventions"
swiftlint.backends = [
    "aqua:realm/SwiftLint",
    "asdf:mise-plugins/mise-swiftlint"
]
swiftlint.test = ["swiftlint --version", "{{version}}"]
swiprolog.backends = ["asdf:mise-plugins/mise-swiprolog"]
syft.description = "CLI tool and library for generating a Software Bill of Materials from container images and filesystems"
syft.backends = ["aqua:anchore/syft", "asdf:davidgp1701/asdf-syft"]
tailpipe.description = "select * from logs! Tailpipe is an open source SIEM for instant log insights, powered by DuckDB. Analyze millions of events in seconds, right from your terminal"
tailpipe.backends = ["aqua:turbot/tailpipe"]
tailpipe.test = ["tailpipe --version", "Tailpipe v{{version}}"]
talhelper.description = "A tool to help creating Talos kubernetes cluster"
talhelper.backends = ["aqua:budimanjojo/talhelper", "asdf:bjw-s/asdf-talhelper"]
talosctl.aliases = ["talos"]
talosctl.description = "Talos is a modern OS for Kubernetes. talosctl is a CLI for out-of-band management of Kubernetes nodes created by Talos"
talosctl.backends = [
    "aqua:siderolabs/talos",
    "ubi:siderolabs/talos[exe=talosctl]"
]
talosctl.test = [
    "talosctl version --client --short | grep 'Talos'",
    "Talos v{{version}}"
]
tanka.description = "Flexible, reusable and concise configuration for Kubernetes"
tanka.backends = ["aqua:grafana/tanka", "asdf:trotttrotttrott/asdf-tanka"]
tanzu.backends = ["asdf:mise-plugins/tanzu-plug-in-for-asdf"]
taplo.description = "A TOML toolkit written in Rust"
taplo.backends = ["aqua:tamasfe/taplo", "ubi:tamasfe/taplo", "cargo:taplo-cli"]
taplo.test = ["taplo --version", "taplo {{version}}"]
task.description = "A task runner / simpler Make alternative written in Go"
task.backends = [
    "aqua:go-task/task",
    "ubi:go-task/task",
    "asdf:particledecay/asdf-task"
]
task.test = ["task --version", "{{version}}"]
tctl.description = "Temporal CLI"
tctl.backends = ["aqua:temporalio/tctl", "asdf:eko/asdf-tctl"]
tekton.aliases = ["tekton-cli"]
tekton.description = "A CLI for interacting with Tekton"
tekton.backends = ["aqua:tektoncd/cli", "asdf:johnhamelink/asdf-tekton-cli"]
teleport-community.backends = ["asdf:mise-plugins/mise-teleport-community"]
teleport-ent.backends = ["asdf:mise-plugins/mise-teleport-ent"]
telepresence.description = "Local development against a remote Kubernetes or OpenShift cluster"
telepresence.backends = [
    "aqua:telepresenceio/telepresence",
    "asdf:pirackr/asdf-telepresence"
]
television.description = "The revolution will (not) be televised"
television.backends = ["aqua:alexpasmantier/television"]
television.test = ["tv --version", "television {{version}}"]
teller.description = "Cloud native secrets management for developers - never leave your command line for secrets"
teller.backends = ["aqua:tellerops/teller", "asdf:pdemagny/asdf-teller"]
temporal.description = "Temporal service and CLI"
temporal.backends = [
    "aqua:temporalio/temporal",
    "asdf:asdf-community/asdf-temporal"
]
terradozer.description = "Terraform destroy without configuration files"
terradozer.backends = [
    "aqua:jckuester/terradozer",
    "asdf:chessmango/asdf-terradozer"
]
terraform.description = "Terraform enables you to safely and predictably create, change, and improve infrastructure. It is an open source tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned"
terraform.backends = [
    "aqua:hashicorp/terraform",
    "asdf:mise-plugins/mise-hashicorp",
    "vfox:mise-plugins/vfox-terraform"
]
terraform.idiomatic_files = [".terraform-version"]
terraform.test = ["terraform version", "Terraform v{{version}}"]
terraform-docs.description = "Generate documentation from Terraform modules in various output formats"
terraform-docs.backends = [
    "aqua:terraform-docs/terraform-docs",
    "asdf:looztra/asdf-terraform-docs"
]
terraform-ls.description = "Terraform Language Server"
terraform-ls.backends = [
    "aqua:hashicorp/terraform-ls",
    "asdf:mise-plugins/mise-hashicorp"
]
terraform-lsp.description = "Language Server Protocol for Terraform"
terraform-lsp.backends = [
    "aqua:juliosueiras/terraform-lsp",
    "asdf:bartlomiejdanek/asdf-terraform-lsp"
]
terraform-validator.description = "A norms and conventions validator for Terraform"
terraform-validator.backends = [
    "aqua:thazelart/terraform-validator",
    "asdf:looztra/asdf-terraform-validator"
]
terraformer.description = "CLI tool to generate terraform files from existing infrastructure (reverse Terraform). Infrastructure to Code"
terraformer.backends = [
    "aqua:GoogleCloudPlatform/terraformer",
    "asdf:gr1m0h/asdf-terraformer"
]
terragrunt.description = "Terragrunt is a thin wrapper for Terraform that provides extra tools for working with multiple Terraform modules"
terragrunt.backends = [
    "aqua:gruntwork-io/terragrunt",
    "asdf:gruntwork-io/asdf-terragrunt"
]
terragrunt.idiomatic_files = [".terragrunt-version"]
terragrunt.test = ["terragrunt --version", "terragrunt version v{{version}}"]
terramate.description = "Open-source Infrastructure as Code (IaC) orchestration platform: GitOps workflows, orchestration, code generation, observability, drift detection, asset management, policies, Slack notifications, and more. Integrates with Terraform, OpenTofu, Terragrunt, Kubernetes, GitHub Actions, GitLab CI/CD, BitBucket Pipelines, and any other CI/CD platform"
terramate.backends = [
    "aqua:terramate-io/terramate",
    "asdf:martinlindner/asdf-terramate"
]
terrascan.description = "Detect compliance and security violations across Infrastructure as Code to mitigate risk before provisioning cloud native infrastructure"
terrascan.backends = ["aqua:tenable/terrascan", "asdf:hpdobrica/asdf-terrascan"]
tf-summarize.description = "A command-line utility to print the summary of the terraform plan"
tf-summarize.backends = [
    "aqua:dineshba/tf-summarize",
    "asdf:adamcrews/asdf-tf-summarize"
]
tfc-agent.backends = ["asdf:mise-plugins/mise-hashicorp"]
tfctl.backends = ["aqua:flux-iac/tofu-controller/tfctl", "asdf:deas/asdf-tfctl"]
tfenv.description = "Terraform version manager"
tfenv.backends = ["aqua:tfutils/tfenv", "asdf:carlduevel/asdf-tfenv"]
tflint.description = "A Pluggable Terraform Linter"
tflint.backends = [
    "aqua:terraform-linters/tflint",
    "ubi:terraform-linters/tflint",
    "asdf:skyzyx/asdf-tflint"
]
tflint.test = ["tflint --version", "TFLint version {{version}}"]
tfmigrate.description = "A Terraform / OpenTofu state migration tool for GitOps"
tfmigrate.backends = ["aqua:minamijoyo/tfmigrate", "asdf:dex4er/asdf-tfmigrate"]
tfnotify.description = "A CLI command to parse Terraform execution result and notify it to GitHub"
tfnotify.backends = ["aqua:mercari/tfnotify", "asdf:jnavarrof/asdf-tfnotify"]
tfsec.description = "Security scanner for your Terraform code"
tfsec.backends = ["aqua:aquasecurity/tfsec", "asdf:woneill/asdf-tfsec"]
tfstate-lookup.description = "Lookup resource attributes in tfstate"
tfstate-lookup.backends = [
    "aqua:fujiwara/tfstate-lookup",
    "asdf:carnei-ro/asdf-tfstate-lookup"
]
tfswitch.backends = [
    "ubi:warrensbox/terraform-switcher[exe=tfswitch]",
    "asdf:iul1an/asdf-tfswitch"
]
tfupdate.description = "Update version constraints in your Terraform configurations"
tfupdate.backends = ["aqua:minamijoyo/tfupdate", "asdf:yuokada/asdf-tfupdate"]
thrift.backends = ["asdf:mise-plugins/mise-thrift"]
tilt.description = "Define your dev environment as code. For microservice apps on Kubernetes"
tilt.backends = ["aqua:tilt-dev/tilt", "asdf:eaceaser/asdf-tilt"]
timoni.description = "Timoni is a package manager for Kubernetes, powered by CUE and inspired by Helm"
timoni.backends = ["aqua:stefanprodan/timoni", "asdf:Smana/asdf-timoni"]
tiny.description = "rtx-tiny is mostly a fake plugin to check mise in CI"
tiny.backends = ["asdf:mise-plugins/mise-tiny"]
tinytex.backends = ["asdf:mise-plugins/mise-tinytex"]
titan.backends = ["ubi:titan-data/titan", "asdf:gabitchov/asdf-titan"]
tlrc.description = "A tldr client written in Rust"
tlrc.backends = ["aqua:tldr-pages/tlrc", "ubi:tldr-pages/tlrc", "cargo:tlrc"]
tlrc.test = ["tldr --version", "tlrc v{{version}}"]
tmux.backends = ["asdf:mise-plugins/mise-tmux"]
tokei.description = "Count your code, quickly"
tokei.backends = [
    "aqua:XAMPPRocky/tokei",
    "ubi:XAMPPRocky/tokei",
    "asdf:gasuketsu/asdf-tokei"
]
tokei.test = ["tokei --version", "tokei {{version}}"]
tomcat.backends = ["asdf:mise-plugins/mise-tomcat"]
tonnage.backends = [
    "ubi:elementalvoid/tonnage",
    "asdf:elementalvoid/asdf-tonnage"
]
traefik.backends = ["ubi:traefik/traefik", "asdf:Dabolus/asdf-traefik"]
transifex.backends = ["ubi:transifex/cli[exe=tx]", "asdf:ORCID/asdf-transifex"]
trdsql.description = "CLI tool that can execute SQL queries on CSV, LTSV, JSON and TBLN. Can output to various formats"
trdsql.backends = ["aqua:noborus/trdsql", "asdf:johnlayton/asdf-trdsql"]
tree-sitter.description = "An incremental parsing system for programming tools"
tree-sitter.backends = [
    "aqua:tree-sitter/tree-sitter",
    "asdf:ivanvc/asdf-tree-sitter"
]
tridentctl.backends = [
    "aqua:NetApp/trident/tridentctl",
    "asdf:asdf-community/asdf-tridentctl"
]
trivy.description = "Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more"
trivy.backends = ["aqua:aquasecurity/trivy", "asdf:zufardhiyaulhaq/asdf-trivy"]
trunk.backends = ["npm:@trunkio/launcher"]
trunk.description = "Trunk is a comprehensive code quality tool that runs linters, formatters, and security scanners to help maintain high-quality codebases (https://trunk.io)"
trunk.test = [
    "trunk --help",
    "trunk [flags] [subcommand]"
] # --version can't be used because we know the launcher version, but we get the binary version
trzsz-ssh.aliases = ["tssh"]
trzsz-ssh.description = "trzsz-ssh ( tssh ) is an ssh client designed as a drop-in replacement for the openssh client. It aims to provide complete compatibility with openssh, mirroring all its features, while also offering additional useful features. Such as login prompt, batch login, remember password, automated interaction, trzsz, zmodem(rz/sz), udp mode like mosh, etc."
trzsz-ssh.backends = [
    "aqua:trzsz/trzsz-ssh",
    "ubi:trzsz/trzsz-ssh",
    "go:github.com/trzsz/trzsz-ssh/cmd/tssh"
]
trzsz-ssh.test = ["tssh --version 2>&1", "trzsz ssh {{version}}"]
tsuru.backends = [
    "ubi:tsuru/tsuru-client[exe=tsuru]",
    "asdf:virtualstaticvoid/asdf-tsuru"
]
ttyd.description = "Share your terminal over the web"
ttyd.backends = ["aqua:tsl0922/ttyd", "asdf:ivanvc/asdf-ttyd"]
tuist.description = "A toolchain to generate Xcode projects from Swift packages"
tuist.backends = ["asdf:mise-plugins/mise-tuist"]
tuist.os = ["macos"]
tusd.backends = ["ubi:tus/tusd"]
tusd.test = ["tusd --version | head -n1", "Version: v{{version}}"]
typos.description = "Source code spell checker"
typos.backends = [
    "aqua:crate-ci/typos",
    "ubi:crate-ci/typos",
    "asdf:aschiavon91/asdf-typos",
    "cargo:typos-cli"
]
typos.test = ["typos --version", "typos-cli {{version}}"]
typst.description = "A new markup-based typesetting system that is powerful and easy to learn"
typst.backends = [
    "aqua:typst/typst",
    "ubi:typst/typst",
    "asdf:stephane-klein/asdf-typst",
    "cargo:typst-cli"
]
typst.test = ["typst --version", "typst {{version}}"]
typstyle.backends = [
    "aqua:Enter-tainer/typstyle",
    "ubi:Enter-tainer/typstyle",
    "cargo:typstyle"
]
typstyle.test = [
    "typstyle --version | grep 'Version:' | awk '{print $2}'",
    "{{version}}"
]
uaa.aliases = ["uaa-cli"]
uaa.description = "CLI for UAA written in Go"
uaa.backends = [
    "aqua:cloudfoundry/uaa-cli",
    "ubi:cloudfoundry/uaa-cli[exe=uaa]",
    "asdf:mise-plugins/tanzu-plug-in-for-asdf"
]
uaa.test = ["uaa version", "{{version}}"]
ubi.description = "The Universal Binary Installer"
ubi.backends = ["aqua:houseabsolute/ubi", "ubi:houseabsolute/ubi"]
ubi.test = ["ubi --version", "ubi {{version}}"]
unison.backends = ["ubi:unisonweb/unison", "asdf:susurri/asdf-unison"]
upctl.description = "UpCloud command line client (upctl)"
upctl.backends = ["aqua:UpCloudLtd/upcloud-cli"]
upctl.test = ["upctl version", "{{version}}"]
updatecli.description = "A Declarative Dependency Management tool"
updatecli.backends = [
    "aqua:updatecli/updatecli",
    "asdf:updatecli/asdf-updatecli"
]
upt.backends = ["ubi:sigoden/upt", "asdf:ORCID/asdf-upt"]
upx.description = "UPX - the Ultimate Packer for eXecutables"
upx.backends = ["aqua:upx/upx", "asdf:jimmidyson/asdf-upx"]
usage.description = "A specification for CLIs"
usage.backends = [
    # prebuilt binaries are not available for FreeBSD
    {full = "aqua:jdx/usage", os = ["linux", "macos"]},
    {full = "ubi:jdx/usage", os = ["linux", "macos"]},
    {full = "asdf:mise-plugins/mise-usage", os = ["linux", "macos"]},
    "cargo:usage-cli"
]
usage.os = ["linux", "macos", "freebsd"]
usage.test = ["usage --version", "usage-cli {{version}}"]
usql.description = "Universal command-line interface for SQL databases"
usql.backends = ["aqua:xo/usql", "asdf:itspngu/asdf-usql"]
uv.description = "An extremely fast Python package installer and resolver, written in Rust"
uv.backends = [
    "aqua:astral-sh/uv",
    "ubi:astral-sh/uv",
    "asdf:asdf-community/asdf-uv",
    "pipx:uv"
]
uv.test = ["uv --version", "uv {{version}}"]
v.backends = ["asdf:mise-plugins/mise-v"]
vacuum.description = "vacuum is the worlds fastest OpenAPI 3, OpenAPI 2 / Swagger linter and quality analysis tool. Built in go, it tears through API specs faster than you can think. vacuum is compatible with Spectral rulesets and generates compatible reports"
vacuum.backends = ["aqua:daveshanley/vacuum"]
vacuum.test = ["vacuum version", "{{version}}"]
vale.description = ":pencil: A markup-aware linter for prose built with speed and extensibility in mind"
vale.backends = ["aqua:errata-ai/vale", "asdf:pdemagny/asdf-vale"]
vals.description = "Helm-like configuration values loader with support for various sources"
vals.backends = ["aqua:helmfile/vals", "asdf:dex4er/asdf-vals"]
vault.description = "A tool for secrets management, encryption as a service, and privileged access management"
vault.backends = ["aqua:hashicorp/vault", "asdf:mise-plugins/mise-hashicorp"]
vault.test = ["vault version", "Vault v{{version}}"]
vcluster.description = "vCluster - Create fully functional virtual Kubernetes clusters - Each vcluster runs inside a namespace of the underlying k8s cluster. It's cheaper than creating separate full-blown clusters and it offers better multi-tenancy and isolation than regular namespaces"
vcluster.backends = [
    "aqua:loft-sh/vcluster",
    "asdf:https://gitlab.com/wt0f/asdf-vcluster"
]
velad.backends = ["ubi:kubevela/velad", "asdf:mise-plugins/mise-velad"]
velad.test = ["velad version", "Version: v{{version}}"]
velero.description = "Backup and migrate Kubernetes applications and their persistent volumes"
velero.backends = ["aqua:vmware-tanzu/velero", "asdf:looztra/asdf-velero"]
vendir.description = "Easy way to vendor portions of git repos, github releases, helm charts, docker image contents, etc. declaratively"
vendir.backends = ["aqua:carvel-dev/vendir", "asdf:vmware-tanzu/asdf-carvel"]
venom.description = "Manage and run your integration tests with efficiency - Venom run executors (script, HTTP Request, web, imap, etc... ) and assertions"
venom.backends = ["aqua:ovh/venom", "asdf:aabouzaid/asdf-venom"]
vfox.description = "A cross-platform and extendable version manager with support for Java, Node.js, Flutter, .Net & more"
vfox.backends = ["aqua:version-fox/vfox", "ubi:version-fox/vfox"]
vfox.test = ["vfox --version", "vfox version {{version}}"]
vhs.description = "Your CLI home video recorder"
vhs.backends = ["aqua:charmbracelet/vhs", "asdf:chessmango/asdf-vhs"]
victoria-metrics.backends = [
    "aqua:VictoriaMetrics/VictoriaMetrics/victoria-metrics"
]
# victoria-metrics.test = [
# "victoria-metrics --version | awk -F'-' '{print $6}'",
# "{{version}}"
# ]
viddy.description = "A modern watch command. Time machine and pager etc"
viddy.backends = ["aqua:sachaos/viddy", "asdf:ryodocx/asdf-viddy"]
vim.backends = ["asdf:mise-plugins/mise-vim"]
virtualos.backends = ["asdf:mise-plugins/mise-virtualos"]
vivid.description = "A themeable LS_COLORS generator with a rich filetype datebase"
vivid.backends = ["aqua:sharkdp/vivid", "ubi:sharkdp/vivid"]
vivid.test = ["vivid --version", "vivid {{version}}"]
vlang.backends = ["vfox:mise-plugins/vfox-vlang"]
vlt.backends = ["asdf:mise-plugins/mise-hashicorp"]
vultr.aliases = ["vultr-cli"]
vultr.backends = ["ubi:vultr/vultr-cli", "asdf:ikuradon/asdf-vultr-cli"]
vultr.test = ["vultr-cli version", "Vultr-CLI v{{version}}"]
wait-for-gh-rate-limit.backends = ["ubi:jdx/wait-for-gh-rate-limit"]
wash.backends = ["aqua:wasmCloud/wasmCloud/wash"]
wash.test = ["wash --version | head -n1 | awk '{print $2}'", "v{{version}}"]
wasi-sdk.backends = ["asdf:mise-plugins/mise-wasi-sdk"]
wasm3.backends = ["asdf:mise-plugins/mise-wasm3"]
wasm4.description = "Build retro games using WebAssembly for a fantasy console"
wasm4.backends = [
    "aqua:aduros/wasm4",
    "ubi:aduros/wasm4[exe=w4]",
    "asdf:jtakakura/asdf-wasm4"
]
wasm4.test = ["w4 --version", "{{version}}"]
wasmer.description = "The leading WebAssembly Runtime supporting WASI and Emscripten"
wasmer.backends = ["aqua:wasmerio/wasmer", "asdf:tachyonicbytes/asdf-wasmer"]
wasmtime.description = "A lightweight WebAssembly runtime that is fast, secure, and standards-compliant"
wasmtime.backends = [
    "aqua:bytecodealliance/wasmtime",
    "asdf:tachyonicbytes/asdf-wasmtime"
]
watchexec.description = "Executes commands in response to file modifications"
watchexec.backends = [
    "aqua:watchexec/watchexec",
    "ubi:watchexec/watchexec",
    "asdf:nyrst/asdf-watchexec",
    "cargo:watchexec-cli"
]
watchexec.test = ["watchexec --version", "watchexec {{version}}"]
waypoint.description = "A tool to build, deploy, and release any application on any platform"
waypoint.backends = [
    "aqua:hashicorp/waypoint",
    "asdf:mise-plugins/mise-hashicorp"
]
weave-gitops.backends = [
    "ubi:weaveworks/weave-gitops[exe=gitops]",
    "asdf:deas/asdf-weave-gitops"
]
websocat.description = "Command-line client for WebSockets, like netcat (or curl) for ws:// with advanced socat-like functions"
websocat.backends = ["aqua:vi/websocat", "asdf:bdellegrazie/asdf-websocat"]
wren.description = "A command line tool for the Wren programming language"
wren.aliases = ["wren-cli"]
wren.backends = [
    "aqua:wren-lang/wren-cli",
    "ubi:wren-lang/wren-cli[exe=wren_cli]",
    "asdf:jtakakura/asdf-wren-cli"
]
wren.test = ["wren_cli --version", "wren {{version}}"]
wrk.backends = ["asdf:mise-plugins/mise-wrk"]
wtfutil.description = "WTF is the personal information dashboard for your terminal"
wtfutil.backends = ["aqua:wtfutil/wtf", "asdf:NeoHsu/asdf-wtfutil"]
wtfutil.test = ["wtfutil --help", "wtfutil "] # may not have version in output
xc.description = "Markdown defined task runner"
xc.backends = ["aqua:joerdav/xc", "asdf:airtonix/asdf-xc"]
xcbeautify.description = "A little beautifier tool for xcodebuild"
xcbeautify.backends = [
    "aqua:cpisciotta/xcbeautify",
    "ubi:cpisciotta/xcbeautify",
    "asdf:mise-plugins/asdf-xcbeautify"
]
xcbeautify.test = ["which xcbeautify", "xcbeautify"]
xchtmlreport.backends = ["asdf:mise-plugins/mise-xchtmlreport"]
xcodegen.backends = ["asdf:mise-plugins/mise-xcodegen"]
xcodes.description = "The best command-line tool to install and switch between multiple versions of Xcode"
xcodes.backends = ["aqua:XcodesOrg/xcodes"]
xcodes.os = ["macos"]
xcodes.test = ["xcodes version", "{{version}}"]
xcresultparser.backends = ["asdf:mise-plugins/mise-xcresultparser"]
xh.description = "Friendly and fast tool for sending HTTP requests"
xh.backends = [
    "aqua:ducaale/xh",
    "ubi:ducaale/xh",
    "asdf:NeoHsu/asdf-xh",
    "cargo:xh"
]
xh.test = ["xh -V", "xh {{version}}"]
yadm.backends = ["asdf:mise-plugins/mise-yadm"]
yamlfmt.description = "An extensible command line tool or library to format yaml files"
yamlfmt.backends = [
    "aqua:google/yamlfmt",
    "ubi:google/yamlfmt",
    "asdf:mise-plugins/asdf-yamlfmt",
    "go:github.com/google/yamlfmt/cmd/yamlfmt"
]
yamlfmt.test = ["yamlfmt --version", "yamlfmt {{version}}"]
yamllint.backends = ["pipx:yamllint", "asdf:ericcornelissen/asdf-yamllint"]
yamllint.test = ["yamllint --version", "yamllint {{version}}"]
yamlscript.backends = [
    "aqua:yaml/yamlscript",
    "ubi:yaml/yamlscript[matching_regex=^ys,extract_all=true]",
    "asdf:mise-plugins/mise-yamlscript"
]
yamlscript.test = ["ys --version", "{{version}}"]
yarn.backends = [
    "asdf:mise-plugins/mise-yarn",
    "aqua:yarnpkg/berry",
    "npm:@yarnpkg/cli-dist"
]
yarn.test = ["yarn --version", "{{version}}"]
yay.backends = ["asdf:mise-plugins/mise-yay"]
yazi.description = "Blazing fast terminal file manager written in Rust, based on async I/O"
yazi.backends = ["aqua:sxyazi/yazi"]
yazi.test = ["yazi --version", "Yazi {{version}}"]
yj.description = "CLI - Convert between YAML, TOML, JSON, and HCL. Preserves map order"
yj.backends = ["aqua:sclevine/yj", "ubi:sclevine/yj", "asdf:ryodocx/asdf-yj"]
yj.test = ["yj -v", "v{{version}}"]
yor.description = "Extensible auto-tagger for your IaC files. The ultimate way to link entities in the cloud back to the codified resource which created it"
yor.backends = ["aqua:bridgecrewio/yor", "asdf:ordinaryexperts/asdf-yor"]
youtube-dl.description = "Command-line program to download videos from YouTube.com and other video sites"
youtube-dl.backends = [
    "aqua:ytdl-org/ytdl-nightly",
    "ubi:ytdl-org/ytdl-nightly[matching_regex=^youtube-dl$,rename_exe=youtube-dl]",
    "asdf:mise-plugins/mise-youtube-dl"
]
youtube-dl.test = ["youtube-dl --version", "{{version}}"]
yq.description = "yq is a portable command-line YAML processor"
yq.backends = [
    "aqua:mikefarah/yq",
    "ubi:mikefarah/yq",
    "asdf:sudermanjr/asdf-yq",
    "go:github.com/mikefarah/yq/v4"
]
yq.test = ["yq --version", "version v{{version}}"]
yt-dlp.backends = ["ubi:yt-dlp/yt-dlp", "asdf:duhow/asdf-yt-dlp"]
ytt.description = "YAML templating tool that works on YAML structure instead of text"
ytt.backends = ["aqua:carvel-dev/ytt", "asdf:vmware-tanzu/asdf-carvel"]
zbctl.backends = ["asdf:mise-plugins/mise-zbctl"]
zellij.description = "A terminal workspace with batteries included"
zellij.backends = [
    "aqua:zellij-org/zellij",
    "ubi:zellij-org/zellij",
    "asdf:chessmango/asdf-zellij"
]
zellij.test = ["zellij --version", "zellij {{version}}"]
zephyr.description = "Tree shaking breeze for PureScript CoreFn AST"
zephyr.backends = [
    "aqua:MaybeJustJames/zephyr",
    "ubi:MaybeJustJames/zephyr",
    "asdf:nsaunders/asdf-zephyr"
]
zephyr.test = ["zephyr --version", "{{version}}"]
zig.backends = ["core:zig"]
zigmod.backends = ["ubi:nektro/zigmod", "asdf:mise-plugins/asdf-zigmod"]
zigmod.test = ["zigmod version", "{{version}}"]
zizmor.description = "Static analysis for GitHub Actions"
zizmor.backends = [
    "aqua:zizmorcore/zizmor",
    "ubi:zizmorcore/zizmor",
    "cargo:zizmor"
]
zizmor.test = ["zizmor --version", "zizmor {{version}}"]
zls.description = "A Zig language server supporting Zig developers with features like autocomplete and goto definition"
zls.backends = ["aqua:zigtools/zls", "ubi:zigtools/zls"]
zls.test = ["zls --version", "{{version}}"]
zola.description = "A fast static site generator in a single binary with everything built-in. https://www.getzola.org"
zola.backends = [
    "aqua:getzola/zola",
    "ubi:getzola/zola",
    "asdf:salasrod/asdf-zola"
]
zola.test = ["zola --version", "zola {{version}}"]
zoxide.description = "A smarter cd command. Supports all major shells"
zoxide.backends = [
    "aqua:ajeetdsouza/zoxide",
    "ubi:ajeetdsouza/zoxide",
    "asdf:nyrst/asdf-zoxide"
]
zoxide.test = ["zoxide --version", "zoxide {{version}}"]
zprint.backends = ["asdf:mise-plugins/mise-zprint"]
